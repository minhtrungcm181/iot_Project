
Signal_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200000a0  08003e74  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003e74  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f8  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  0002c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0002ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ae  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb84  00000000  00000000  00048976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abd8  00000000  00000000  000574fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e20d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000e2124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d40 	.word	0x08003d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08003d40 	.word	0x08003d40

0800014c <get_data_DHT>:
{
	return data_ready;
}

uint8_t* get_data_DHT()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return dht_data;
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <get_data_DHT+0x10>)
}
 8000152:	4618      	mov	r0, r3
 8000154:	46bd      	mov	sp, r7
 8000156:	bc80      	pop	{r7}
 8000158:	4770      	bx	lr
 800015a:	bf00      	nop
 800015c:	20000000 	.word	0x20000000

08000160 <request_DHT>:

void request_DHT()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	status = 0;
 8000164:	4b05      	ldr	r3, [pc, #20]	; (800017c <request_DHT+0x1c>)
 8000166:	2200      	movs	r2, #0
 8000168:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)"!DHT#", sizeof("!DHT#"), 1000);
 800016a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016e:	2206      	movs	r2, #6
 8000170:	4903      	ldr	r1, [pc, #12]	; (8000180 <request_DHT+0x20>)
 8000172:	4804      	ldr	r0, [pc, #16]	; (8000184 <request_DHT+0x24>)
 8000174:	f002 fc3d 	bl	80029f2 <HAL_UART_Transmit>
	//HAL_GPIO_TogglePin(LED_Port[1], LED_Pin[1]);
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	200000c5 	.word	0x200000c5
 8000180:	08003d58 	.word	0x08003d58
 8000184:	20000180 	.word	0x20000180

08000188 <record_data_DHT>:

uint8_t record_data_DHT(uint8_t c)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
	if (idx_byte_dht == 0)
 8000192:	4b2f      	ldr	r3, [pc, #188]	; (8000250 <record_data_DHT+0xc8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d10e      	bne.n	80001b8 <record_data_DHT+0x30>
	{
		if (c == '!'){
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b21      	cmp	r3, #33	; 0x21
 800019e:	d151      	bne.n	8000244 <record_data_DHT+0xbc>
			data_ready = 0;
 80001a0:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <record_data_DHT+0xcc>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
			dht_buffer[idx_byte_dht] = c;
 80001a6:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <record_data_DHT+0xc8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	492b      	ldr	r1, [pc, #172]	; (8000258 <record_data_DHT+0xd0>)
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	54ca      	strb	r2, [r1, r3]
			idx_byte_dht = 1;
 80001b0:	4b27      	ldr	r3, [pc, #156]	; (8000250 <record_data_DHT+0xc8>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	e045      	b.n	8000244 <record_data_DHT+0xbc>
		}
	}
	else
	{
		if (c == '#')
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	2b23      	cmp	r3, #35	; 0x23
 80001bc:	d129      	bne.n	8000212 <record_data_DHT+0x8a>
		{
			dht_buffer[idx_byte_dht] = c;
 80001be:	4b24      	ldr	r3, [pc, #144]	; (8000250 <record_data_DHT+0xc8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4925      	ldr	r1, [pc, #148]	; (8000258 <record_data_DHT+0xd0>)
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	54ca      	strb	r2, [r1, r3]
			dht_buffer[idx_byte_dht + 1] = '\0';
 80001c8:	4b21      	ldr	r3, [pc, #132]	; (8000250 <record_data_DHT+0xc8>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3301      	adds	r3, #1
 80001ce:	4a22      	ldr	r2, [pc, #136]	; (8000258 <record_data_DHT+0xd0>)
 80001d0:	2100      	movs	r1, #0
 80001d2:	54d1      	strb	r1, [r2, r3]
			for (int i = 0; i < idx_byte_dht + 2; i++){
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e00b      	b.n	80001f2 <record_data_DHT+0x6a>
				dht_data[i] = dht_buffer[i];
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <record_data_DHT+0xd0>)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4413      	add	r3, r2
 80001e0:	7819      	ldrb	r1, [r3, #0]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <record_data_DHT+0xd4>)
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	4413      	add	r3, r2
 80001e8:	460a      	mov	r2, r1
 80001ea:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < idx_byte_dht + 2; i++){
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	4b17      	ldr	r3, [pc, #92]	; (8000250 <record_data_DHT+0xc8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	dded      	ble.n	80001da <record_data_DHT+0x52>
			}
			idx_byte_dht = 0;
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <record_data_DHT+0xc8>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
			data_ready = 1;
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <record_data_DHT+0xcc>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
			status = 1;
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <record_data_DHT+0xd8>)
 800020c:	2201      	movs	r2, #1
 800020e:	701a      	strb	r2, [r3, #0]
 8000210:	e018      	b.n	8000244 <record_data_DHT+0xbc>
		}
		else
		{
			if (idx_byte_dht == 10)
 8000212:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <record_data_DHT+0xc8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b0a      	cmp	r3, #10
 8000218:	d10a      	bne.n	8000230 <record_data_DHT+0xa8>
			{
				idx_byte_dht = 0;
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <record_data_DHT+0xc8>)
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)"!ERROR#", sizeof("!ERROR#"), 1000);
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	2208      	movs	r2, #8
 8000226:	490f      	ldr	r1, [pc, #60]	; (8000264 <record_data_DHT+0xdc>)
 8000228:	480f      	ldr	r0, [pc, #60]	; (8000268 <record_data_DHT+0xe0>)
 800022a:	f002 fbe2 	bl	80029f2 <HAL_UART_Transmit>
 800022e:	e009      	b.n	8000244 <record_data_DHT+0xbc>
			}
			else
			{
				dht_buffer[idx_byte_dht] = c;
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <record_data_DHT+0xc8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4908      	ldr	r1, [pc, #32]	; (8000258 <record_data_DHT+0xd0>)
 8000236:	79fa      	ldrb	r2, [r7, #7]
 8000238:	54ca      	strb	r2, [r1, r3]
				idx_byte_dht ++;
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <record_data_DHT+0xc8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <record_data_DHT+0xc8>)
 8000242:	6013      	str	r3, [r2, #0]
			}
		}
	}
	return 0;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000008 	.word	0x20000008
 8000254:	200000c4 	.word	0x200000c4
 8000258:	200000bc 	.word	0x200000bc
 800025c:	20000000 	.word	0x20000000
 8000260:	200000c5 	.word	0x200000c5
 8000264:	08003d60 	.word	0x08003d60
 8000268:	20000180 	.word	0x20000180

0800026c <Identify_request>:

uint8_t request_complete = 0;
int resend = 0;
uint8_t error_rq [11] = {'!','E','R', 'R', 'O', 'R', '_', 'R', 'Q', '#', '\0'};

Request_Type Identify_request(char c){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	switch (c)
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b33      	cmp	r3, #51	; 0x33
 800027a:	d00a      	beq.n	8000292 <Identify_request+0x26>
 800027c:	2b33      	cmp	r3, #51	; 0x33
 800027e:	dc0a      	bgt.n	8000296 <Identify_request+0x2a>
 8000280:	2b31      	cmp	r3, #49	; 0x31
 8000282:	d002      	beq.n	800028a <Identify_request+0x1e>
 8000284:	2b32      	cmp	r3, #50	; 0x32
 8000286:	d002      	beq.n	800028e <Identify_request+0x22>
 8000288:	e005      	b.n	8000296 <Identify_request+0x2a>
	{
	case '1':
		return DEVICES;
 800028a:	2302      	movs	r3, #2
 800028c:	e004      	b.n	8000298 <Identify_request+0x2c>
	case '2':
		return DHT;
 800028e:	2300      	movs	r3, #0
 8000290:	e002      	b.n	8000298 <Identify_request+0x2c>
	case '3':
		return LIGHT;
 8000292:	2301      	movs	r3, #1
 8000294:	e000      	b.n	8000298 <Identify_request+0x2c>
	default:
		return NONE;
 8000296:	2303      	movs	r3, #3
	}
}
 8000298:	4618      	mov	r0, r3
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
	...

080002a4 <fsm>:

void fsm()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//DHT_ReadTempHum(&sensor_DHT);
	switch(state)
 80002a8:	4b6e      	ldr	r3, [pc, #440]	; (8000464 <fsm+0x1c0>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	f000 80a9 	beq.w	8000404 <fsm+0x160>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	f300 80d4 	bgt.w	8000460 <fsm+0x1bc>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <fsm+0x1e>
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d036      	beq.n	800032e <fsm+0x8a>
			resend = 1;
		}
		break;
	}

}
 80002c0:	e0ce      	b.n	8000460 <fsm+0x1bc>
		if (get_flag(0))
 80002c2:	2000      	movs	r0, #0
 80002c4:	f000 fed4 	bl	8001070 <get_flag>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d00c      	beq.n	80002e8 <fsm+0x44>
			HAL_GPIO_TogglePin(LED_Port[0], LED_Pin[0]);
 80002ce:	4b66      	ldr	r3, [pc, #408]	; (8000468 <fsm+0x1c4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a66      	ldr	r2, [pc, #408]	; (800046c <fsm+0x1c8>)
 80002d4:	8812      	ldrh	r2, [r2, #0]
 80002d6:	4611      	mov	r1, r2
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fb0f 	bl	80018fc <HAL_GPIO_TogglePin>
			setTimer(0, 1000);
 80002de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fea6 	bl	8001034 <setTimer>
		if (request_ready())
 80002e8:	f000 f8d6 	bl	8000498 <request_ready>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f000 80b3 	beq.w	800045a <fsm+0x1b6>
			HAL_GPIO_WritePin(LED_Port[0], LED_Pin[0], SET);
 80002f4:	4b5c      	ldr	r3, [pc, #368]	; (8000468 <fsm+0x1c4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a5c      	ldr	r2, [pc, #368]	; (800046c <fsm+0x1c8>)
 80002fa:	8811      	ldrh	r1, [r2, #0]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fae4 	bl	80018cc <HAL_GPIO_WritePin>
			request_processing();
 8000304:	f000 f8d2 	bl	80004ac <request_processing>
			state = REQUEST_PROCESSING;
 8000308:	4b56      	ldr	r3, [pc, #344]	; (8000464 <fsm+0x1c0>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
			request = get_request();
 800030e:	f000 f8d9 	bl	80004c4 <get_request>
 8000312:	4603      	mov	r3, r0
 8000314:	4a56      	ldr	r2, [pc, #344]	; (8000470 <fsm+0x1cc>)
 8000316:	6013      	str	r3, [r2, #0]
			req = Identify_request(request[0]);
 8000318:	4b55      	ldr	r3, [pc, #340]	; (8000470 <fsm+0x1cc>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffa4 	bl	800026c <Identify_request>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	4b52      	ldr	r3, [pc, #328]	; (8000474 <fsm+0x1d0>)
 800032a:	701a      	strb	r2, [r3, #0]
		break;
 800032c:	e095      	b.n	800045a <fsm+0x1b6>
		if (!resend){
 800032e:	4b52      	ldr	r3, [pc, #328]	; (8000478 <fsm+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d147      	bne.n	80003c6 <fsm+0x122>
			switch(req){
 8000336:	4b4f      	ldr	r3, [pc, #316]	; (8000474 <fsm+0x1d0>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d844      	bhi.n	80003c8 <fsm+0x124>
 800033e:	a201      	add	r2, pc, #4	; (adr r2, 8000344 <fsm+0xa0>)
 8000340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000344:	0800037b 	.word	0x0800037b
 8000348:	08000393 	.word	0x08000393
 800034c:	08000355 	.word	0x08000355
 8000350:	080003b3 	.word	0x080003b3
				set_state(request[2]);
 8000354:	4b46      	ldr	r3, [pc, #280]	; (8000470 <fsm+0x1cc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3302      	adds	r3, #2
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fb3d 	bl	80009dc <set_state>
				data = get_sendback();
 8000362:	f000 fb27 	bl	80009b4 <get_sendback>
 8000366:	4603      	mov	r3, r0
 8000368:	4a44      	ldr	r2, [pc, #272]	; (800047c <fsm+0x1d8>)
 800036a:	6013      	str	r3, [r2, #0]
				data_size = 3;
 800036c:	4b44      	ldr	r3, [pc, #272]	; (8000480 <fsm+0x1dc>)
 800036e:	2203      	movs	r2, #3
 8000370:	701a      	strb	r2, [r3, #0]
				request_complete = 1;
 8000372:	4b44      	ldr	r3, [pc, #272]	; (8000484 <fsm+0x1e0>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
				break;
 8000378:	e026      	b.n	80003c8 <fsm+0x124>
				data = get_data_DHT();
 800037a:	f7ff fee7 	bl	800014c <get_data_DHT>
 800037e:	4603      	mov	r3, r0
 8000380:	4a3e      	ldr	r2, [pc, #248]	; (800047c <fsm+0x1d8>)
 8000382:	6013      	str	r3, [r2, #0]
				data_size = 11;
 8000384:	4b3e      	ldr	r3, [pc, #248]	; (8000480 <fsm+0x1dc>)
 8000386:	220b      	movs	r2, #11
 8000388:	701a      	strb	r2, [r3, #0]
				request_complete = 1;
 800038a:	4b3e      	ldr	r3, [pc, #248]	; (8000484 <fsm+0x1e0>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
				break;
 8000390:	e01a      	b.n	80003c8 <fsm+0x124>
				data_size = sprintf((char*)data, "!L=%lu#", light_value);
 8000392:	4b3a      	ldr	r3, [pc, #232]	; (800047c <fsm+0x1d8>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a3c      	ldr	r2, [pc, #240]	; (8000488 <fsm+0x1e4>)
 8000398:	6812      	ldr	r2, [r2, #0]
 800039a:	493c      	ldr	r1, [pc, #240]	; (800048c <fsm+0x1e8>)
 800039c:	4618      	mov	r0, r3
 800039e:	f003 f941 	bl	8003624 <siprintf>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <fsm+0x1dc>)
 80003a8:	701a      	strb	r2, [r3, #0]
				request_complete = 1;
 80003aa:	4b36      	ldr	r3, [pc, #216]	; (8000484 <fsm+0x1e0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
				break;
 80003b0:	e00a      	b.n	80003c8 <fsm+0x124>
				data = error_rq;
 80003b2:	4b32      	ldr	r3, [pc, #200]	; (800047c <fsm+0x1d8>)
 80003b4:	4a36      	ldr	r2, [pc, #216]	; (8000490 <fsm+0x1ec>)
 80003b6:	601a      	str	r2, [r3, #0]
				data_size = 10;
 80003b8:	4b31      	ldr	r3, [pc, #196]	; (8000480 <fsm+0x1dc>)
 80003ba:	220a      	movs	r2, #10
 80003bc:	701a      	strb	r2, [r3, #0]
				request_complete = 1;
 80003be:	4b31      	ldr	r3, [pc, #196]	; (8000484 <fsm+0x1e0>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
				break;
 80003c4:	e000      	b.n	80003c8 <fsm+0x124>
		}
 80003c6:	bf00      	nop
		if (req == NONE)
 80003c8:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <fsm+0x1d0>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d103      	bne.n	80003d8 <fsm+0x134>
			state = IDLE;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <fsm+0x1c0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e002      	b.n	80003de <fsm+0x13a>
			state = CONFORM_WAITING;
 80003d8:	4b22      	ldr	r3, [pc, #136]	; (8000464 <fsm+0x1c0>)
 80003da:	2202      	movs	r2, #2
 80003dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, data, data_size, 3000);
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <fsm+0x1d8>)
 80003e0:	6819      	ldr	r1, [r3, #0]
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <fsm+0x1dc>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80003ec:	4829      	ldr	r0, [pc, #164]	; (8000494 <fsm+0x1f0>)
 80003ee:	f002 fb00 	bl	80029f2 <HAL_UART_Transmit>
		resend = 0;
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <fsm+0x1d4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
		setTimer(1, 3000);
 80003f8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80003fc:	2001      	movs	r0, #1
 80003fe:	f000 fe19 	bl	8001034 <setTimer>
		break;
 8000402:	e02d      	b.n	8000460 <fsm+0x1bc>
		if (request_ready())
 8000404:	f000 f848 	bl	8000498 <request_ready>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d018      	beq.n	8000440 <fsm+0x19c>
			request = get_request();
 800040e:	f000 f859 	bl	80004c4 <get_request>
 8000412:	4603      	mov	r3, r0
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <fsm+0x1cc>)
 8000416:	6013      	str	r3, [r2, #0]
			if (request[0] == 'O' && request[1] == 'K')
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <fsm+0x1cc>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b4f      	cmp	r3, #79	; 0x4f
 8000420:	d10e      	bne.n	8000440 <fsm+0x19c>
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <fsm+0x1cc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b4b      	cmp	r3, #75	; 0x4b
 800042c:	d108      	bne.n	8000440 <fsm+0x19c>
				state = IDLE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <fsm+0x1c0>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
				setTimer(1, 0);
 8000434:	2100      	movs	r1, #0
 8000436:	2001      	movs	r0, #1
 8000438:	f000 fdfc 	bl	8001034 <setTimer>
				request_processing();
 800043c:	f000 f836 	bl	80004ac <request_processing>
		if (get_flag(1))
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fe15 	bl	8001070 <get_flag>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <fsm+0x1ba>
			state = REQUEST_PROCESSING;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <fsm+0x1c0>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
			resend = 1;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <fsm+0x1d4>)
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
		break;
 8000458:	e001      	b.n	800045e <fsm+0x1ba>
		break;
 800045a:	bf00      	nop
 800045c:	e000      	b.n	8000460 <fsm+0x1bc>
		break;
 800045e:	bf00      	nop
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200000c6 	.word	0x200000c6
 8000468:	2000001c 	.word	0x2000001c
 800046c:	20000020 	.word	0x20000020
 8000470:	200000c8 	.word	0x200000c8
 8000474:	2000000c 	.word	0x2000000c
 8000478:	200000dc 	.word	0x200000dc
 800047c:	200000cc 	.word	0x200000cc
 8000480:	200000d0 	.word	0x200000d0
 8000484:	200000d8 	.word	0x200000d8
 8000488:	200000d4 	.word	0x200000d4
 800048c:	08003d68 	.word	0x08003d68
 8000490:	20000010 	.word	0x20000010
 8000494:	2000013c 	.word	0x2000013c

08000498 <request_ready>:
uint8_t request_available = 0;

extern uint8_t error_rq[];

uint8_t request_ready()
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	return request_available;
 800049c:	4b02      	ldr	r3, [pc, #8]	; (80004a8 <request_ready+0x10>)
 800049e:	781b      	ldrb	r3, [r3, #0]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	200000f1 	.word	0x200000f1

080004ac <request_processing>:

void request_processing()
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	request_available = 0;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <request_processing+0x14>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	200000f1 	.word	0x200000f1

080004c4 <get_request>:

uint8_t* get_request()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	idx_byte = 0;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <get_request+0x14>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
	return buffer;
 80004ce:	4b03      	ldr	r3, [pc, #12]	; (80004dc <get_request+0x18>)
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	200000ec 	.word	0x200000ec
 80004dc:	200000e0 	.word	0x200000e0

080004e0 <record>:

uint8_t record(uint8_t c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]

	if (start == 0)
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <record+0x88>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d106      	bne.n	8000500 <record+0x20>
	{
		if (c == '!'){
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b21      	cmp	r3, #33	; 0x21
 80004f6:	d131      	bne.n	800055c <record+0x7c>
			start = 1;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <record+0x88>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	e02d      	b.n	800055c <record+0x7c>
		}
	}
	else
	{
		if (c == '#')
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b23      	cmp	r3, #35	; 0x23
 8000504:	d10e      	bne.n	8000524 <record+0x44>
		{
			request_available = 1;
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <record+0x8c>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
			start = 0;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <record+0x88>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
			buffer[idx_byte] = '\0';
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <record+0x90>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <record+0x94>)
 8000518:	2100      	movs	r1, #0
 800051a:	54d1      	strb	r1, [r2, r3]
			idx_byte = 0;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <record+0x90>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e01b      	b.n	800055c <record+0x7c>
		}
		else
		{
			if (idx_byte + 1 == MAX_BUFFER_LENGTH)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <record+0x90>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b09      	cmp	r3, #9
 800052a:	d10d      	bne.n	8000548 <record+0x68>
			{
				start = 0;
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <record+0x88>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
				idx_byte = 0;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <record+0x90>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, error_rq, 10, 2000);
 8000538:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800053c:	220a      	movs	r2, #10
 800053e:	490e      	ldr	r1, [pc, #56]	; (8000578 <record+0x98>)
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <record+0x9c>)
 8000542:	f002 fa56 	bl	80029f2 <HAL_UART_Transmit>
 8000546:	e009      	b.n	800055c <record+0x7c>
			}
			else
			{
				buffer[idx_byte] = c;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <record+0x90>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4909      	ldr	r1, [pc, #36]	; (8000574 <record+0x94>)
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	54ca      	strb	r2, [r1, r3]
				idx_byte ++;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <record+0x90>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <record+0x90>)
 800055a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	return 0;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000f0 	.word	0x200000f0
 800056c:	200000f1 	.word	0x200000f1
 8000570:	200000ec 	.word	0x200000ec
 8000574:	200000e0 	.word	0x200000e0
 8000578:	20000010 	.word	0x20000010
 800057c:	2000013c 	.word	0x2000013c

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdda 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f83c 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f94a 	bl	8000824 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000590:	f000 f87e 	bl	8000690 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f8c8 	bl	8000728 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000598:	f000 f91a 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8ee 	bl	800077c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0x68>)
 80005a2:	f001 fe2f 	bl	8002204 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fe29 	bl	8001200 <HAL_Delay>
  //DHT_Init(&sensor_DHT, DHT11, &htim4, DHT_Port, DHT_Pin);
  SCH_INIT();
 80005ae:	f000 fa55 	bl	8000a5c <SCH_INIT>
  SW_TIM_Init();
 80005b2:	f000 fd29 	bl	8001008 <SW_TIM_Init>
  //DHT_ReadTempHum();
  SCH_Add_Task(fsm, 1, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2101      	movs	r1, #1
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x6c>)
 80005bc:	f000 fa5e 	bl	8000a7c <SCH_Add_Task>
  SCH_Add_Task(request_DHT, 100, 500);
 80005c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005c4:	2164      	movs	r1, #100	; 0x64
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x70>)
 80005c8:	f000 fa58 	bl	8000a7c <SCH_Add_Task>
  //SCH_Add_Task(read_light_sensor, 200, 500);
  //SCH_Add_Task(checkUSART, 2, 1);
  //SCH_Add_Task(timer_run, 2, 1);
  //SCH_Add_Task(button_reading, 4, 1);
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	4909      	ldr	r1, [pc, #36]	; (80005f4 <main+0x74>)
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <main+0x78>)
 80005d2:	f002 faa0 	bl	8002b16 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &temp_dht, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4908      	ldr	r1, [pc, #32]	; (80005fc <main+0x7c>)
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x80>)
 80005dc:	f002 fa9b 	bl	8002b16 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 SCH_Dispatch_Task();
 80005e0:	f000 fafe 	bl	8000be0 <SCH_Dispatch_Task>
 80005e4:	e7fc      	b.n	80005e0 <main+0x60>
 80005e6:	bf00      	nop
 80005e8:	200000f4 	.word	0x200000f4
 80005ec:	080002a5 	.word	0x080002a5
 80005f0:	08000161 	.word	0x08000161
 80005f4:	20000208 	.word	0x20000208
 80005f8:	2000013c 	.word	0x2000013c
 80005fc:	20000209 	.word	0x20000209
 8000600:	20000180 	.word	0x20000180

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b090      	sub	sp, #64	; 0x40
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ff12 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f96f 	bl	8001930 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000658:	f000 f9a6 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fbdc 	bl	8001e34 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000682:	f000 f991 	bl	80009a8 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM2_Init+0x94>)
 80006b6:	2247      	movs	r2, #71	; 0x47
 80006b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_TIM2_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM2_Init+0x94>)
 80006c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d6:	f001 fd45 	bl	8002164 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 f962 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM2_Init+0x94>)
 80006f2:	f001 fee1 	bl	80024b8 <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f954 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM2_Init+0x94>)
 800070e:	f002 f8b3 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 f946 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000f4 	.word	0x200000f4

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART1_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000760:	f002 f8fa 	bl	8002958 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f91d 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000013c 	.word	0x2000013c
 8000778:	40013800 	.word	0x40013800

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f002 f8d0 	bl	8002958 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f8f3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000180 	.word	0x20000180
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART3_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART3_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART3_UART_Init+0x4c>)
 8000808:	f002 f8a6 	bl	8002958 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f8c9 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001c4 	.word	0x200001c4
 8000820:	40004800 	.word	0x40004800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_GPIO_Init+0xec>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a34      	ldr	r2, [pc, #208]	; (8000910 <MX_GPIO_Init+0xec>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_GPIO_Init+0xec>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_GPIO_Init+0xec>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_GPIO_Init+0xec>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0320 	and.w	r3, r3, #32
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_GPIO_Init+0xec>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MX_GPIO_Init+0xec>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xec>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_GPIO_Init+0xec>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a22      	ldr	r2, [pc, #136]	; (8000910 <MX_GPIO_Init+0xec>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_GPIO_Init+0xec>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0xf0>)
 80008a0:	f001 f814 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_GPIO_Init+0xf4>)
 80008ac:	f001 f80e 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0xf0>)
 80008c6:	f000 fe7d 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_GPIO_Init+0xf0>)
 80008e4:	f000 fe6e 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000902:	f000 fe5f 	bl	80015c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40011000 	.word	0x40011000
 8000918:	40010c00 	.word	0x40010c00

0800091c <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_TogglePin(LED_Port[1], LED_Pin[1]);
	}
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d103      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		SCH_Update_Task();
 800092e:	f000 f907 	bl	8000b40 <SCH_Update_Task>
		timer_run();
 8000932:	f000 fbad 	bl	8001090 <timer_run>
	}
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_UART_RxCpltCallback+0x50>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10a      	bne.n	8000968 <HAL_UART_RxCpltCallback+0x28>
		record(temp);
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_UART_RxCpltCallback+0x54>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fdc2 	bl	80004e0 <record>
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <HAL_UART_RxCpltCallback+0x54>)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <HAL_UART_RxCpltCallback+0x58>)
 8000962:	f002 f8d8 	bl	8002b16 <HAL_UART_Receive_IT>
	else if(huart->Instance == USART2){
		record_data_DHT(temp_dht);
		HAL_UART_Receive_IT(&huart2, &temp_dht, 1);
	}

}
 8000966:	e00e      	b.n	8000986 <HAL_UART_RxCpltCallback+0x46>
	else if(huart->Instance == USART2){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_UART_RxCpltCallback+0x5c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d109      	bne.n	8000986 <HAL_UART_RxCpltCallback+0x46>
		record_data_DHT(temp_dht);
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fc06 	bl	8000188 <record_data_DHT>
		HAL_UART_Receive_IT(&huart2, &temp_dht, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <HAL_UART_RxCpltCallback+0x64>)
 8000982:	f002 f8c8 	bl	8002b16 <HAL_UART_Receive_IT>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013800 	.word	0x40013800
 8000994:	20000208 	.word	0x20000208
 8000998:	2000013c 	.word	0x2000013c
 800099c:	40004400 	.word	0x40004400
 80009a0:	20000209 	.word	0x20000209
 80009a4:	20000180 	.word	0x20000180

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <get_sendback>:

GPIO_PinState state_device = GPIO_PIN_RESET;
uint8_t HIGH_STATE [] = {'!', '1', '#', '\0'};
uint8_t LOW_STATE [] = {'!', '0', '#', '\0'};

uint8_t* get_sendback(){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	if (state_device == GPIO_PIN_RESET)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <get_sendback+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <get_sendback+0x10>
		return LOW_STATE;
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <get_sendback+0x20>)
 80009c2:	e000      	b.n	80009c6 <get_sendback+0x12>
	else
		return HIGH_STATE;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <get_sendback+0x24>)
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000020a 	.word	0x2000020a
 80009d4:	20000028 	.word	0x20000028
 80009d8:	20000024 	.word	0x20000024

080009dc <set_state>:
void set_state(uint8_t s){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if (s == '0')
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b30      	cmp	r3, #48	; 0x30
 80009ea:	d103      	bne.n	80009f4 <set_state+0x18>
		state_device = GPIO_PIN_RESET;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <set_state+0x38>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e002      	b.n	80009fa <set_state+0x1e>
	else
		state_device = GPIO_PIN_SET;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <set_state+0x38>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, state_device);
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <set_state+0x38>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <set_state+0x3c>)
 8000a06:	f000 ff61 	bl	80018cc <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000020a 	.word	0x2000020a
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <createTask>:

static queue_t ReadyQueue;
static queue_t RunQueue;

task_t* createTask(uint32_t TID, uint32_t Period, uint32_t Delay, void(*pTask)())
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
    task_t* newTask = (task_t*)malloc(sizeof(task_t));
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	f002 fcf6 	bl	800341c <malloc>
 8000a30:	4603      	mov	r3, r0
 8000a32:	617b      	str	r3, [r7, #20]
    newTask->TID = TID;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	601a      	str	r2, [r3, #0]
    newTask->Delay = Delay;
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	605a      	str	r2, [r3, #4]
    newTask->Period = Period;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	609a      	str	r2, [r3, #8]
    newTask->pTask = pTask;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	611a      	str	r2, [r3, #16]
    newTask->RunMe = 0;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	731a      	strb	r2, [r3, #12]

    return newTask;
 8000a52:	697b      	ldr	r3, [r7, #20]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SCH_INIT>:

void SCH_INIT()
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
    ReadyQueue.size = 0;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SCH_INIT+0x18>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
    RunQueue.size = 0;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SCH_INIT+0x1c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	20000238 	.word	0x20000238

08000a7c <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*func)(), uint32_t Delay, uint32_t Period)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
    if (ReadyQueue.size == MAX_TASK_SIZE) return 0;   // HOW ABOUT ERROR CODE?
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	2b0a      	cmp	r3, #10
 8000a8e:	d101      	bne.n	8000a94 <SCH_Add_Task+0x18>
 8000a90:	2300      	movs	r3, #0
 8000a92:	e04f      	b.n	8000b34 <SCH_Add_Task+0xb8>
    task_t* newTask = createTask(1, Period, Delay, func);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ffbe 	bl	8000a1c <createTask>
 8000aa0:	6138      	str	r0, [r7, #16]

    // ADD TASK
    int32_t idx = ReadyQueue.size - 1;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
    while (idx >= 0 && (int32_t)(newTask->Delay - ReadyQueue.task[idx]->Delay) >= 0)
 8000aaa:	e015      	b.n	8000ad8 <SCH_Add_Task+0x5c>
    {
        newTask->Delay -= ReadyQueue.task[idx]->Delay;
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4922      	ldr	r1, [pc, #136]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	1ad2      	subs	r2, r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	605a      	str	r2, [r3, #4]
        ReadyQueue.task[idx + 1] = ReadyQueue.task[idx];
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	491d      	ldr	r1, [pc, #116]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000acc:	491b      	ldr	r1, [pc, #108]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        idx--;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
    while (idx >= 0 && (int32_t)(newTask->Delay - ReadyQueue.task[idx]->Delay) >= 0)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db09      	blt.n	8000af2 <SCH_Add_Task+0x76>
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4916      	ldr	r1, [pc, #88]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dadc      	bge.n	8000aac <SCH_Add_Task+0x30>
    }
    idx += 1;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
    if (idx > 0)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	dd0e      	ble.n	8000b1c <SCH_Add_Task+0xa0>
    {
        ReadyQueue.task[idx - 1]->Delay -= newTask->Delay;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	6859      	ldr	r1, [r3, #4]
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000b14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b18:	1a8a      	subs	r2, r1, r2
 8000b1a:	605a      	str	r2, [r3, #4]
    }
    ReadyQueue.task[idx] = newTask;
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ++ReadyQueue.size;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <SCH_Add_Task+0xc0>)
 8000b2e:	6293      	str	r3, [r2, #40]	; 0x28
    return newTask->TID;
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000020c 	.word	0x2000020c

08000b40 <SCH_Update_Task>:

void SCH_Update_Task()
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
    if (ReadyQueue.size != 0)
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d040      	beq.n	8000bce <SCH_Update_Task+0x8e>
    {
        if (ReadyQueue.task[ReadyQueue.size - 1]->Delay == 0)
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	3b01      	subs	r3, #1
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d12e      	bne.n	8000bbc <SCH_Update_Task+0x7c>
        {
            ReadyQueue.size --;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b66:	6293      	str	r3, [r2, #40]	; 0x28
            ReadyQueue.task[ReadyQueue.size]->RunMe += 1;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	7b1a      	ldrb	r2, [r3, #12]
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4917      	ldr	r1, [pc, #92]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b7e:	3201      	adds	r2, #1
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	731a      	strb	r2, [r3, #12]
            ReadyQueue.task[ReadyQueue.size]->Delay = ReadyQueue.task[ReadyQueue.size]->Period;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	4911      	ldr	r1, [pc, #68]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b98:	6892      	ldr	r2, [r2, #8]
 8000b9a:	605a      	str	r2, [r3, #4]
            RunQueue.task[RunQueue.size] = ReadyQueue.task[ReadyQueue.size];
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <SCH_Update_Task+0x9c>)
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000baa:	490c      	ldr	r1, [pc, #48]	; (8000bdc <SCH_Update_Task+0x9c>)
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            RunQueue.size++;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <SCH_Update_Task+0x9c>)
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <SCH_Update_Task+0x9c>)
 8000bb8:	6293      	str	r3, [r2, #40]	; 0x28
        {
            ReadyQueue.task[ReadyQueue.size - 1]->Delay--;
        }
    }

}
 8000bba:	e008      	b.n	8000bce <SCH_Update_Task+0x8e>
            ReadyQueue.task[ReadyQueue.size - 1]->Delay--;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SCH_Update_Task+0x98>)
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	3a01      	subs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000020c 	.word	0x2000020c
 8000bdc:	20000238 	.word	0x20000238

08000be0 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    while (RunQueue.size != 0)
 8000be4:	e04d      	b.n	8000c82 <SCH_Dispatch_Task+0xa2>
    {
        (*(RunQueue.task[RunQueue.size-1]->pTask))();
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	3b01      	subs	r3, #1
 8000bec:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4798      	blx	r3
        RunQueue.task[RunQueue.size - 1]->RunMe -= 1;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	7b1a      	ldrb	r2, [r3, #12]
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4921      	ldr	r1, [pc, #132]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c10:	3a01      	subs	r2, #1
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	731a      	strb	r2, [r3, #12]
        if (RunQueue.task[RunQueue.size - 1]->Period != 0)
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d017      	beq.n	8000c58 <SCH_Dispatch_Task+0x78>
        {
            SCH_Add_Task(RunQueue.task[RunQueue.size - 1]->pTask, RunQueue.task[RunQueue.size - 1]->Delay, RunQueue.task[RunQueue.size - 1]->Period);
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	6918      	ldr	r0, [r3, #16]
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	6859      	ldr	r1, [r3, #4]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	461a      	mov	r2, r3
 8000c54:	f7ff ff12 	bl	8000a7c <SCH_Add_Task>
        }
        free(RunQueue.task[RunQueue.size - 1]);
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fbe1 	bl	800342c <free>
        RunQueue.task[RunQueue.size - 1] = NULL;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        RunQueue.size--;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c80:	6293      	str	r3, [r2, #40]	; 0x28
    while (RunQueue.size != 0)
 8000c82:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <SCH_Dispatch_Task+0xb0>)
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1ad      	bne.n	8000be6 <SCH_Dispatch_Task+0x6>
    }
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000238 	.word	0x20000238

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d08:	d113      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201c      	movs	r0, #28
 8000d28:	f000 fb65 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 fb7e 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a5f      	ldr	r2, [pc, #380]	; (8000ed8 <HAL_UART_MspInit+0x198>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13a      	bne.n	8000dd6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d60:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a5d      	ldr	r2, [pc, #372]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b5b      	ldr	r3, [pc, #364]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a57      	ldr	r2, [pc, #348]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b55      	ldr	r3, [pc, #340]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	4619      	mov	r1, r3
 8000da4:	484e      	ldr	r0, [pc, #312]	; (8000ee0 <HAL_UART_MspInit+0x1a0>)
 8000da6:	f000 fc0d 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4848      	ldr	r0, [pc, #288]	; (8000ee0 <HAL_UART_MspInit+0x1a0>)
 8000dc0:	f000 fc00 	bl	80015c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2025      	movs	r0, #37	; 0x25
 8000dca:	f000 fb14 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dce:	2025      	movs	r0, #37	; 0x25
 8000dd0:	f000 fb2d 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd4:	e07c      	b.n	8000ed0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a42      	ldr	r2, [pc, #264]	; (8000ee4 <HAL_UART_MspInit+0x1a4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d138      	bne.n	8000e52 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dea:	61d3      	str	r3, [r2, #28]
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e10:	2304      	movs	r3, #4
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	482f      	ldr	r0, [pc, #188]	; (8000ee0 <HAL_UART_MspInit+0x1a0>)
 8000e24:	f000 fbce 	bl	80015c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <HAL_UART_MspInit+0x1a0>)
 8000e3c:	f000 fbc2 	bl	80015c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fad6 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e4a:	2026      	movs	r0, #38	; 0x26
 8000e4c:	f000 faef 	bl	800142e <HAL_NVIC_EnableIRQ>
}
 8000e50:	e03e      	b.n	8000ed0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <HAL_UART_MspInit+0x1a8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d139      	bne.n	8000ed0 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_UART_MspInit+0x19c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <HAL_UART_MspInit+0x1ac>)
 8000ea2:	f000 fb8f 	bl	80015c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <HAL_UART_MspInit+0x1ac>)
 8000ebc:	f000 fb82 	bl	80015c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 fa96 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eca:	2027      	movs	r0, #39	; 0x27
 8000ecc:	f000 faaf 	bl	800142e <HAL_NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	40004800 	.word	0x40004800
 8000eec:	40010c00 	.word	0x40010c00

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f947 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM2_IRQHandler+0x10>)
 8000f46:	f001 f9af 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000f4 	.word	0x200000f4

08000f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART1_IRQHandler+0x10>)
 8000f5a:	f001 fe0d 	bl	8002b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000013c 	.word	0x2000013c

08000f68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <USART2_IRQHandler+0x10>)
 8000f6e:	f001 fe03 	bl	8002b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000180 	.word	0x20000180

08000f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART3_IRQHandler+0x10>)
 8000f82:	f001 fdf9 	bl	8002b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001c4 	.word	0x200001c4

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f002 fa02 	bl	80033c8 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20005000 	.word	0x20005000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	20000264 	.word	0x20000264
 8000ff8:	20000298 	.word	0x20000298

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <SW_TIM_Init>:
int timer_flag[N_TIMERS];

int TIMER_CYCLE = 10;

void SW_TIM_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N_TIMERS; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e006      	b.n	8001022 <SW_TIM_Init+0x1a>
		setTimer(i, 10);
 8001014:	210a      	movs	r1, #10
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f80c 	bl	8001034 <setTimer>
	for (int i = 0; i < N_TIMERS; i++){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	ddf5      	ble.n	8001014 <SW_TIM_Init+0xc>
	}
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <setTimer>:

void setTimer(int TIMx, int duration)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	timer_counter[TIMx] = duration / TIMER_CYCLE ;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <setTimer+0x30>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb92 f2f3 	sdiv	r2, r2, r3
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <setTimer+0x34>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[TIMx] = 0;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <setTimer+0x38>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2100      	movs	r1, #0
 8001056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000030 	.word	0x20000030
 8001068:	20000268 	.word	0x20000268
 800106c:	20000274 	.word	0x20000274

08001070 <get_flag>:

int get_flag(int TIMx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	return timer_flag[TIMx];
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <get_flag+0x1c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000274 	.word	0x20000274

08001090 <timer_run>:

void timer_run ()
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
	for (int i = 0; i < N_TIMERS; i++){
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	e01c      	b.n	80010d6 <timer_run+0x46>
		if( timer_counter[i] > 0){
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <timer_run+0x58>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd13      	ble.n	80010d0 <timer_run+0x40>
			timer_counter[i]--;
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <timer_run+0x58>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <timer_run+0x58>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if( timer_counter[i] == 0) timer_flag[i] = 1;
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <timer_run+0x58>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d104      	bne.n	80010d0 <timer_run+0x40>
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <timer_run+0x5c>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2101      	movs	r1, #1
 80010cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N_TIMERS; i++){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	dddf      	ble.n	800109c <timer_run+0xc>
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000268 	.word	0x20000268
 80010ec:	20000274 	.word	0x20000274

080010f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001116:	f7ff ff71 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f002 f95b 	bl	80033d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff fa2f 	bl	8000580 <main>
  bx lr
 8001122:	4770      	bx	lr
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800112c:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 8001130:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001134:	20000294 	.word	0x20000294

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x28>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f947 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fd9c 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f95f 	bl	800144a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f927 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000002c 	.word	0x2000002c
 80011c0:	20000038 	.word	0x20000038
 80011c4:	20000034 	.word	0x20000034

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000038 	.word	0x20000038
 80011e8:	20000280 	.word	0x20000280

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000280 	.word	0x20000280

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000038 	.word	0x20000038

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <__NVIC_EnableIRQ+0x34>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff90 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff2d 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff42 	bl	8001290 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff90 	bl	8001338 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5f 	bl	80012e4 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001474:	2b02      	cmp	r3, #2
 8001476:	d008      	beq.n	800148a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2204      	movs	r2, #4
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e020      	b.n	80014cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 020e 	bic.w	r2, r2, #14
 8001498:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0201 	bic.w	r2, r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d005      	beq.n	80014fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e051      	b.n	800159e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020e 	bic.w	r2, r2, #14
 8001508:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <HAL_DMA_Abort_IT+0xd0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d029      	beq.n	8001578 <HAL_DMA_Abort_IT+0xa0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_DMA_Abort_IT+0xd4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d022      	beq.n	8001574 <HAL_DMA_Abort_IT+0x9c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_DMA_Abort_IT+0xd8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d01a      	beq.n	800156e <HAL_DMA_Abort_IT+0x96>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_DMA_Abort_IT+0xdc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d012      	beq.n	8001568 <HAL_DMA_Abort_IT+0x90>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_DMA_Abort_IT+0xe0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00a      	beq.n	8001562 <HAL_DMA_Abort_IT+0x8a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <HAL_DMA_Abort_IT+0xe4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d102      	bne.n	800155c <HAL_DMA_Abort_IT+0x84>
 8001556:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800155a:	e00e      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 800155c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001560:	e00b      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	e008      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	e005      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 800156e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001572:	e002      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001574:	2310      	movs	r3, #16
 8001576:	e000      	b.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001578:	2301      	movs	r3, #1
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_DMA_Abort_IT+0xe8>)
 800157c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
    } 
  }
  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020008 	.word	0x40020008
 80015ac:	4002001c 	.word	0x4002001c
 80015b0:	40020030 	.word	0x40020030
 80015b4:	40020044 	.word	0x40020044
 80015b8:	40020058 	.word	0x40020058
 80015bc:	4002006c 	.word	0x4002006c
 80015c0:	40020000 	.word	0x40020000

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e169      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8158 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a9a      	ldr	r2, [pc, #616]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d05e      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001600:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d875      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001606:	4a98      	ldr	r2, [pc, #608]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d058      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 800160c:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d86f      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001612:	4a96      	ldr	r2, [pc, #600]	; (800186c <HAL_GPIO_Init+0x2a8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d052      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001618:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2a8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d869      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800161e:	4a94      	ldr	r2, [pc, #592]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04c      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001624:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d863      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800162a:	4a92      	ldr	r2, [pc, #584]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d046      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001630:	4a90      	ldr	r2, [pc, #576]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d85d      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d82a      	bhi.n	8001690 <HAL_GPIO_Init+0xcc>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d859      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_GPIO_Init+0x80>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	080016bf 	.word	0x080016bf
 8001648:	08001699 	.word	0x08001699
 800164c:	080016ab 	.word	0x080016ab
 8001650:	080016ed 	.word	0x080016ed
 8001654:	080016f3 	.word	0x080016f3
 8001658:	080016f3 	.word	0x080016f3
 800165c:	080016f3 	.word	0x080016f3
 8001660:	080016f3 	.word	0x080016f3
 8001664:	080016f3 	.word	0x080016f3
 8001668:	080016f3 	.word	0x080016f3
 800166c:	080016f3 	.word	0x080016f3
 8001670:	080016f3 	.word	0x080016f3
 8001674:	080016f3 	.word	0x080016f3
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016f3 	.word	0x080016f3
 8001680:	080016f3 	.word	0x080016f3
 8001684:	080016f3 	.word	0x080016f3
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016b5 	.word	0x080016b5
 8001690:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_GPIO_Init+0x2b4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001696:	e02c      	b.n	80016f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e029      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	3304      	adds	r3, #4
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e024      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	3308      	adds	r3, #8
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e01f      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	330c      	adds	r3, #12
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e01a      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c6:	2304      	movs	r3, #4
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e013      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	611a      	str	r2, [r3, #16]
          break;
 80016de:	e009      	b.n	80016f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	615a      	str	r2, [r3, #20]
          break;
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          break;
 80016f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d801      	bhi.n	80016fe <HAL_GPIO_Init+0x13a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_Init+0x13e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d802      	bhi.n	8001710 <HAL_GPIO_Init+0x14c>
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x152>
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3b08      	subs	r3, #8
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	210f      	movs	r1, #15
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	6a39      	ldr	r1, [r7, #32]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80b1 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_GPIO_Init+0x2b8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a40      	ldr	r2, [pc, #256]	; (8001884 <HAL_GPIO_Init+0x2c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1ec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_GPIO_Init+0x2c4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_GPIO_Init+0x2c8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <HAL_GPIO_Init+0x2cc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1e0>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c2:	492f      	ldr	r1, [pc, #188]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	492c      	ldr	r1, [pc, #176]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4928      	ldr	r1, [pc, #160]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4922      	ldr	r1, [pc, #136]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	491e      	ldr	r1, [pc, #120]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800181c:	4013      	ands	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4914      	ldr	r1, [pc, #80]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
 8001860:	e021      	b.n	80018a6 <HAL_GPIO_Init+0x2e2>
 8001862:	bf00      	nop
 8001864:	10320000 	.word	0x10320000
 8001868:	10310000 	.word	0x10310000
 800186c:	10220000 	.word	0x10220000
 8001870:	10210000 	.word	0x10210000
 8001874:	10120000 	.word	0x10120000
 8001878:	10110000 	.word	0x10110000
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	40010800 	.word	0x40010800
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40011000 	.word	0x40011000
 8001890:	40011400 	.word	0x40011400
 8001894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4909      	ldr	r1, [pc, #36]	; (80018c8 <HAL_GPIO_Init+0x304>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae8e 	bne.w	80015d8 <HAL_GPIO_Init+0x14>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	372c      	adds	r7, #44	; 0x2c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43d9      	mvns	r1, r3
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	400b      	ands	r3, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
	...

08001930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e272      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8087 	beq.w	8001a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00c      	beq.n	8001976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195c:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
 8001968:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b89      	ldr	r3, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x12c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d168      	bne.n	8001a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e24c      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x76>
 8001998:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e02e      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x98>
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0xbc>
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019ec:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fbee 	bl	80011ec <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fbea 	bl	80011ec <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e200      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe4>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbda 	bl	80011ec <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fbd6 	bl	80011ec <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1ec      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x10c>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11c      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1c0      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4939      	ldr	r1, [pc, #228]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e03a      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb8f 	bl	80011ec <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fb8b 	bl	80011ec <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1a1      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb6e 	bl	80011ec <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fb6a 	bl	80011ec <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e180      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03a      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fb4e 	bl	80011ec <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb4a 	bl	80011ec <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e160      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 fad8 	bl	8002128 <RCC_Delay>
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fb34 	bl	80011ec <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb30 	bl	80011ec <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d908      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e146      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	42420000 	.word	0x42420000
 8001ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e9      	bne.n	8001b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a6 	beq.w	8001d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10d      	bne.n	8001bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a87      	ldr	r2, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x4c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x4c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x4c8>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff faf1 	bl	80011ec <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff faed 	bl	80011ec <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e103      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x4c8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x312>
 8001c34:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a6e      	ldr	r2, [pc, #440]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e02d      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x334>
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a66      	ldr	r2, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	e01c      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x356>
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a60      	ldr	r2, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4b5e      	ldr	r3, [pc, #376]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c86:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a57      	ldr	r2, [pc, #348]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff faa1 	bl	80011ec <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fa9d 	bl	80011ec <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0b1      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ee      	beq.n	8001cae <HAL_RCC_OscConfig+0x37e>
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fa8b 	bl	80011ec <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fa87 	bl	80011ec <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e09b      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a3b      	ldr	r2, [pc, #236]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d061      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d146      	bne.n	8001dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fa5b 	bl	80011ec <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fa57 	bl	80011ec <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e06d      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4921      	ldr	r1, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a19      	ldr	r1, [r3, #32]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	430b      	orrs	r3, r1
 8001d86:	491b      	ldr	r1, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa2b 	bl	80011ec <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff fa27 	bl	80011ec <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e03d      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46a>
 8001db8:	e035      	b.n	8001e26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa14 	bl	80011ec <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff fa10 	bl	80011ec <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e026      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x498>
 8001de6:	e01e      	b.n	8001e26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e019      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_OscConfig+0x500>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0d0      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4965      	ldr	r1, [pc, #404]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b8      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	494d      	ldr	r1, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d040      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e07f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e073      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06b      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4936      	ldr	r1, [pc, #216]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f962 	bl	80011ec <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff f95e 	bl	80011ec <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e053      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d210      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e032      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc2:	f000 f821 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	5ccb      	ldrb	r3, [r1, r3]
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1cc>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8c0 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08003d80 	.word	0x08003d80
 8002000:	2000002c 	.word	0x2000002c
 8002004:	20000034 	.word	0x20000034

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b490      	push	{r4, r7}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002010:	1d3c      	adds	r4, r7, #4
 8002012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002018:	f240 2301 	movw	r3, #513	; 0x201
 800201c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x40>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x46>
 8002046:	e02b      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800204a:	623b      	str	r3, [r7, #32]
      break;
 800204c:	e02b      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3328      	adds	r3, #40	; 0x28
 8002058:	443b      	add	r3, r7
 800205a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800205e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0c5b      	lsrs	r3, r3, #17
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	3328      	adds	r3, #40	; 0x28
 8002076:	443b      	add	r3, r7
 8002078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800207c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002082:	fb03 f202 	mul.w	r2, r3, r2
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e004      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	623b      	str	r3, [r7, #32]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a2:	623b      	str	r3, [r7, #32]
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	6a3b      	ldr	r3, [r7, #32]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc90      	pop	{r4, r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	08003d70 	.word	0x08003d70
 80020b8:	40021000 	.word	0x40021000
 80020bc:	007a1200 	.word	0x007a1200
 80020c0:	003d0900 	.word	0x003d0900

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	2000002c 	.word	0x2000002c

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020dc:	f7ff fff2 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08003d90 	.word	0x08003d90

08002100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002104:	f7ff ffde 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0adb      	lsrs	r3, r3, #11
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4903      	ldr	r1, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08003d90 	.word	0x08003d90

08002128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <RCC_Delay+0x34>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <RCC_Delay+0x38>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a5b      	lsrs	r3, r3, #9
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002144:	bf00      	nop
  }
  while (Delay --);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	60fa      	str	r2, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f9      	bne.n	8002144 <RCC_Delay+0x1c>
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	2000002c 	.word	0x2000002c
 8002160:	10624dd3 	.word	0x10624dd3

08002164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e041      	b.n	80021fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fdb4 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 fa70 	bl	8002688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e03a      	b.n	8002292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_TIM_Base_Start_IT+0x98>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x58>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d009      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x58>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x58>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d010      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227e:	e007      	b.n	8002290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800

080022a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0202 	mvn.w	r2, #2
 80022d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f9b1 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f9a4 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f9b3 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0204 	mvn.w	r2, #4
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f987 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f97a 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f989 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b08      	cmp	r3, #8
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0208 	mvn.w	r2, #8
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2204      	movs	r2, #4
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f95d 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f950 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f95f 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0210 	mvn.w	r2, #16
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2208      	movs	r2, #8
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f933 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f926 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f935 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0201 	mvn.w	r2, #1
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fa78 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d107      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa77 	bl	8002946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8f9 	bl	8002676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0220 	mvn.w	r2, #32
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa42 	bl	8002934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_TIM_ConfigClockSource+0x18>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0b3      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x180>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002508:	d03e      	beq.n	8002588 <HAL_TIM_ConfigClockSource+0xd0>
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	f200 8087 	bhi.w	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	f000 8085 	beq.w	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d87f      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d01a      	beq.n	800255a <HAL_TIM_ConfigClockSource+0xa2>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d87b      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d050      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x116>
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d877      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d03c      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0xf6>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d873      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d058      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x136>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d86f      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d064      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x156>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d86b      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d060      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x156>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d867      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05c      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x156>
 8002554:	2b10      	cmp	r3, #16
 8002556:	d05a      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002558:	e062      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f000 f966 	bl	800283a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800257c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
      break;
 8002586:	e04e      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f000 f94f 	bl	800283a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025aa:	609a      	str	r2, [r3, #8]
      break;
 80025ac:	e03b      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f000 f8c6 	bl	800274c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2150      	movs	r1, #80	; 0x50
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f91d 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 80025cc:	e02b      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 f8e4 	bl	80027a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2160      	movs	r1, #96	; 0x60
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f90d 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 80025ec:	e01b      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f000 f8a6 	bl	800274c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2140      	movs	r1, #64	; 0x40
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f8fd 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 800260c:	e00b      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f000 f8f4 	bl	8002806 <TIM_ITRx_SetConfig>
        break;
 800261e:	e002      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002624:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a29      	ldr	r2, [pc, #164]	; (8002740 <TIM_Base_SetConfig+0xb8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00b      	beq.n	80026b8 <TIM_Base_SetConfig+0x30>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0x30>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a26      	ldr	r2, [pc, #152]	; (8002744 <TIM_Base_SetConfig+0xbc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0x30>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a25      	ldr	r2, [pc, #148]	; (8002748 <TIM_Base_SetConfig+0xc0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d108      	bne.n	80026ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <TIM_Base_SetConfig+0xb8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_Base_SetConfig+0x62>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d007      	beq.n	80026ea <TIM_Base_SetConfig+0x62>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <TIM_Base_SetConfig+0xbc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_Base_SetConfig+0x62>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <TIM_Base_SetConfig+0xc0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <TIM_Base_SetConfig+0xb8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800

0800274c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f023 0201 	bic.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 030a 	bic.w	r3, r3, #10
 8002788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 0210 	bic.w	r2, r3, #16
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	f043 0307 	orr.w	r3, r3, #7
 8002828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4313      	orrs	r3, r2
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	609a      	str	r2, [r3, #8]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e046      	b.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4313      	orrs	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe f9de 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fc85 	bl	80032ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08a      	sub	sp, #40	; 0x28
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d17c      	bne.n	8002b0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_UART_Transmit+0x2c>
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e075      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x3e>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e06e      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a46:	f7fe fbd1 	bl	80011ec <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a84:	e02a      	b.n	8002adc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa38 	bl	8002f06 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cf      	bne.n	8002a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fa08 	bl	8002f06 <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d11d      	bne.n	8002b6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_UART_Receive_IT+0x26>
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e016      	b.n	8002b6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Receive_IT+0x38>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e00f      	b.n	8002b6e <HAL_UART_Receive_IT+0x58>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fa19 	bl	8002f9a <UART_Start_Receive_IT>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	e000      	b.n	8002b6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_UART_IRQHandler+0x52>
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fac9 	bl	800315a <UART_Receive_IT>
      return;
 8002bc8:	e17b      	b.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80b1 	beq.w	8002d34 <HAL_UART_IRQHandler+0x1bc>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_UART_IRQHandler+0x70>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80a6 	beq.w	8002d34 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_UART_IRQHandler+0x90>
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_UART_IRQHandler+0xb0>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_UART_IRQHandler+0xd0>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <HAL_UART_IRQHandler+0xfa>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <HAL_UART_IRQHandler+0xee>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0208 	orr.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 811e 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <HAL_UART_IRQHandler+0x11e>
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa62 	bl	800315a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_UART_IRQHandler+0x146>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d031      	beq.n	8002d22 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9a4 	bl	800300c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	4a76      	ldr	r2, [pc, #472]	; (8002ec8 <HAL_UART_IRQHandler+0x350>)
 8002cf0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fbee 	bl	80014d8 <HAL_DMA_Abort_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	e00e      	b.n	8002d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8e3 	bl	8002ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	e00a      	b.n	8002d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8df 	bl	8002ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e006      	b.n	8002d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8db 	bl	8002ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d2e:	e0c3      	b.n	8002eb8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	bf00      	nop
    return;
 8002d32:	e0c1      	b.n	8002eb8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 80a1 	bne.w	8002e80 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 809b 	beq.w	8002e80 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8095 	beq.w	8002e80 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d04e      	beq.n	8002e18 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d84:	8a3b      	ldrh	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8098 	beq.w	8002ebc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d90:	8a3a      	ldrh	r2, [r7, #16]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	f080 8092 	bcs.w	8002ebc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8a3a      	ldrh	r2, [r7, #16]
 8002d9c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d02b      	beq.n	8002e00 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0210 	bic.w	r2, r2, #16
 8002df4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fb31 	bl	8001462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f86d 	bl	8002ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e16:	e051      	b.n	8002ebc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d047      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e30:	8a7b      	ldrh	r3, [r7, #18]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d044      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e44:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0210 	bic.w	r2, r2, #16
 8002e72:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e74:	8a7b      	ldrh	r3, [r7, #18]
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f839 	bl	8002ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e7e:	e01f      	b.n	8002ec0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_UART_IRQHandler+0x324>
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8f9 	bl	800308c <UART_Transmit_IT>
    return;
 8002e9a:	e012      	b.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f93a 	bl	800312a <UART_EndTransmit_IT>
    return;
 8002eb6:	e004      	b.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
    return;
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ec0:	bf00      	nop
  }
}
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	08003065 	.word	0x08003065

08002ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f16:	e02c      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d028      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f26:	f7fe f961 	bl	80011ec <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d21d      	bcs.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e00f      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0c3      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2222      	movs	r2, #34	; 0x22
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fde:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003022:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff2d 	bl	8002ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b21      	cmp	r3, #33	; 0x21
 800309e:	d13e      	bne.n	800311e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d114      	bne.n	80030d4 <UART_Transmit_IT+0x48>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d110      	bne.n	80030d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]
 80030d2:	e008      	b.n	80030e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	1c59      	adds	r1, r3, #1
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6211      	str	r1, [r2, #32]
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4619      	mov	r1, r3
 80030f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003108:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff febe 	bl	8002ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b22      	cmp	r3, #34	; 0x22
 800316c:	f040 8099 	bne.w	80032a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d117      	bne.n	80031aa <UART_Receive_IT+0x50>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003198:	b29a      	uxth	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	1c9a      	adds	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
 80031a8:	e026      	b.n	80031f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031bc:	d007      	beq.n	80031ce <UART_Receive_IT+0x74>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <UART_Receive_IT+0x82>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e008      	b.n	80031ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29b      	uxth	r3, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4619      	mov	r1, r3
 8003206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003208:	2b00      	cmp	r3, #0
 800320a:	d148      	bne.n	800329e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0220 	bic.w	r2, r2, #32
 800321a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b01      	cmp	r3, #1
 800324a:	d123      	bne.n	8003294 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0210 	bic.w	r2, r2, #16
 8003260:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d10a      	bne.n	8003286 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fe2f 	bl	8002ef0 <HAL_UARTEx_RxEventCallback>
 8003292:	e002      	b.n	800329a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fb53 	bl	8000940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e002      	b.n	80032a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032e6:	f023 030c 	bic.w	r3, r3, #12
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <UART_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe fef4 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	e002      	b.n	8003322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe fedc 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8003320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009a      	lsls	r2, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <UART_SetConfig+0x118>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	0119      	lsls	r1, r3, #4
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <UART_SetConfig+0x118>)
 800335a:	fba3 0302 	umull	r0, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2064      	movs	r0, #100	; 0x64
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <UART_SetConfig+0x118>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003378:	4419      	add	r1, r3
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009a      	lsls	r2, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <UART_SetConfig+0x118>)
 8003392:	fba3 0302 	umull	r0, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2064      	movs	r0, #100	; 0x64
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	3332      	adds	r3, #50	; 0x32
 80033a4:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <UART_SetConfig+0x118>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	440a      	add	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40013800 	.word	0x40013800
 80033c4:	51eb851f 	.word	0x51eb851f

080033c8 <__errno>:
 80033c8:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <__errno+0x8>)
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000003c 	.word	0x2000003c

080033d4 <__libc_init_array>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	2600      	movs	r6, #0
 80033d8:	4d0c      	ldr	r5, [pc, #48]	; (800340c <__libc_init_array+0x38>)
 80033da:	4c0d      	ldr	r4, [pc, #52]	; (8003410 <__libc_init_array+0x3c>)
 80033dc:	1b64      	subs	r4, r4, r5
 80033de:	10a4      	asrs	r4, r4, #2
 80033e0:	42a6      	cmp	r6, r4
 80033e2:	d109      	bne.n	80033f8 <__libc_init_array+0x24>
 80033e4:	f000 fcac 	bl	8003d40 <_init>
 80033e8:	2600      	movs	r6, #0
 80033ea:	4d0a      	ldr	r5, [pc, #40]	; (8003414 <__libc_init_array+0x40>)
 80033ec:	4c0a      	ldr	r4, [pc, #40]	; (8003418 <__libc_init_array+0x44>)
 80033ee:	1b64      	subs	r4, r4, r5
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	42a6      	cmp	r6, r4
 80033f4:	d105      	bne.n	8003402 <__libc_init_array+0x2e>
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fc:	4798      	blx	r3
 80033fe:	3601      	adds	r6, #1
 8003400:	e7ee      	b.n	80033e0 <__libc_init_array+0xc>
 8003402:	f855 3b04 	ldr.w	r3, [r5], #4
 8003406:	4798      	blx	r3
 8003408:	3601      	adds	r6, #1
 800340a:	e7f2      	b.n	80033f2 <__libc_init_array+0x1e>
 800340c:	08003dcc 	.word	0x08003dcc
 8003410:	08003dcc 	.word	0x08003dcc
 8003414:	08003dcc 	.word	0x08003dcc
 8003418:	08003dd0 	.word	0x08003dd0

0800341c <malloc>:
 800341c:	4b02      	ldr	r3, [pc, #8]	; (8003428 <malloc+0xc>)
 800341e:	4601      	mov	r1, r0
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	f000 b87b 	b.w	800351c <_malloc_r>
 8003426:	bf00      	nop
 8003428:	2000003c 	.word	0x2000003c

0800342c <free>:
 800342c:	4b02      	ldr	r3, [pc, #8]	; (8003438 <free+0xc>)
 800342e:	4601      	mov	r1, r0
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f000 b80b 	b.w	800344c <_free_r>
 8003436:	bf00      	nop
 8003438:	2000003c 	.word	0x2000003c

0800343c <memset>:
 800343c:	4603      	mov	r3, r0
 800343e:	4402      	add	r2, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <_free_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4605      	mov	r5, r0
 8003450:	2900      	cmp	r1, #0
 8003452:	d040      	beq.n	80034d6 <_free_r+0x8a>
 8003454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003458:	1f0c      	subs	r4, r1, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	bfb8      	it	lt
 800345e:	18e4      	addlt	r4, r4, r3
 8003460:	f000 f900 	bl	8003664 <__malloc_lock>
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <_free_r+0x8c>)
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	b933      	cbnz	r3, 8003478 <_free_r+0x2c>
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	6014      	str	r4, [r2, #0]
 800346e:	4628      	mov	r0, r5
 8003470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003474:	f000 b8fc 	b.w	8003670 <__malloc_unlock>
 8003478:	42a3      	cmp	r3, r4
 800347a:	d908      	bls.n	800348e <_free_r+0x42>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	1821      	adds	r1, r4, r0
 8003480:	428b      	cmp	r3, r1
 8003482:	bf01      	itttt	eq
 8003484:	6819      	ldreq	r1, [r3, #0]
 8003486:	685b      	ldreq	r3, [r3, #4]
 8003488:	1809      	addeq	r1, r1, r0
 800348a:	6021      	streq	r1, [r4, #0]
 800348c:	e7ed      	b.n	800346a <_free_r+0x1e>
 800348e:	461a      	mov	r2, r3
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b10b      	cbz	r3, 8003498 <_free_r+0x4c>
 8003494:	42a3      	cmp	r3, r4
 8003496:	d9fa      	bls.n	800348e <_free_r+0x42>
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	1850      	adds	r0, r2, r1
 800349c:	42a0      	cmp	r0, r4
 800349e:	d10b      	bne.n	80034b8 <_free_r+0x6c>
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	4401      	add	r1, r0
 80034a4:	1850      	adds	r0, r2, r1
 80034a6:	4283      	cmp	r3, r0
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	d1e0      	bne.n	800346e <_free_r+0x22>
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4401      	add	r1, r0
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	6053      	str	r3, [r2, #4]
 80034b6:	e7da      	b.n	800346e <_free_r+0x22>
 80034b8:	d902      	bls.n	80034c0 <_free_r+0x74>
 80034ba:	230c      	movs	r3, #12
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	e7d6      	b.n	800346e <_free_r+0x22>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	1821      	adds	r1, r4, r0
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf01      	itttt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	1809      	addeq	r1, r1, r0
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	6063      	str	r3, [r4, #4]
 80034d2:	6054      	str	r4, [r2, #4]
 80034d4:	e7cb      	b.n	800346e <_free_r+0x22>
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	20000284 	.word	0x20000284

080034dc <sbrk_aligned>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4e0e      	ldr	r6, [pc, #56]	; (8003518 <sbrk_aligned+0x3c>)
 80034e0:	460c      	mov	r4, r1
 80034e2:	6831      	ldr	r1, [r6, #0]
 80034e4:	4605      	mov	r5, r0
 80034e6:	b911      	cbnz	r1, 80034ee <sbrk_aligned+0x12>
 80034e8:	f000 f88c 	bl	8003604 <_sbrk_r>
 80034ec:	6030      	str	r0, [r6, #0]
 80034ee:	4621      	mov	r1, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 f887 	bl	8003604 <_sbrk_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d00a      	beq.n	8003510 <sbrk_aligned+0x34>
 80034fa:	1cc4      	adds	r4, r0, #3
 80034fc:	f024 0403 	bic.w	r4, r4, #3
 8003500:	42a0      	cmp	r0, r4
 8003502:	d007      	beq.n	8003514 <sbrk_aligned+0x38>
 8003504:	1a21      	subs	r1, r4, r0
 8003506:	4628      	mov	r0, r5
 8003508:	f000 f87c 	bl	8003604 <_sbrk_r>
 800350c:	3001      	adds	r0, #1
 800350e:	d101      	bne.n	8003514 <sbrk_aligned+0x38>
 8003510:	f04f 34ff 	mov.w	r4, #4294967295
 8003514:	4620      	mov	r0, r4
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	20000288 	.word	0x20000288

0800351c <_malloc_r>:
 800351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003520:	1ccd      	adds	r5, r1, #3
 8003522:	f025 0503 	bic.w	r5, r5, #3
 8003526:	3508      	adds	r5, #8
 8003528:	2d0c      	cmp	r5, #12
 800352a:	bf38      	it	cc
 800352c:	250c      	movcc	r5, #12
 800352e:	2d00      	cmp	r5, #0
 8003530:	4607      	mov	r7, r0
 8003532:	db01      	blt.n	8003538 <_malloc_r+0x1c>
 8003534:	42a9      	cmp	r1, r5
 8003536:	d905      	bls.n	8003544 <_malloc_r+0x28>
 8003538:	230c      	movs	r3, #12
 800353a:	2600      	movs	r6, #0
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4630      	mov	r0, r6
 8003540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003544:	4e2e      	ldr	r6, [pc, #184]	; (8003600 <_malloc_r+0xe4>)
 8003546:	f000 f88d 	bl	8003664 <__malloc_lock>
 800354a:	6833      	ldr	r3, [r6, #0]
 800354c:	461c      	mov	r4, r3
 800354e:	bb34      	cbnz	r4, 800359e <_malloc_r+0x82>
 8003550:	4629      	mov	r1, r5
 8003552:	4638      	mov	r0, r7
 8003554:	f7ff ffc2 	bl	80034dc <sbrk_aligned>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	4604      	mov	r4, r0
 800355c:	d14d      	bne.n	80035fa <_malloc_r+0xde>
 800355e:	6834      	ldr	r4, [r6, #0]
 8003560:	4626      	mov	r6, r4
 8003562:	2e00      	cmp	r6, #0
 8003564:	d140      	bne.n	80035e8 <_malloc_r+0xcc>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	4631      	mov	r1, r6
 800356a:	4638      	mov	r0, r7
 800356c:	eb04 0803 	add.w	r8, r4, r3
 8003570:	f000 f848 	bl	8003604 <_sbrk_r>
 8003574:	4580      	cmp	r8, r0
 8003576:	d13a      	bne.n	80035ee <_malloc_r+0xd2>
 8003578:	6821      	ldr	r1, [r4, #0]
 800357a:	3503      	adds	r5, #3
 800357c:	1a6d      	subs	r5, r5, r1
 800357e:	f025 0503 	bic.w	r5, r5, #3
 8003582:	3508      	adds	r5, #8
 8003584:	2d0c      	cmp	r5, #12
 8003586:	bf38      	it	cc
 8003588:	250c      	movcc	r5, #12
 800358a:	4638      	mov	r0, r7
 800358c:	4629      	mov	r1, r5
 800358e:	f7ff ffa5 	bl	80034dc <sbrk_aligned>
 8003592:	3001      	adds	r0, #1
 8003594:	d02b      	beq.n	80035ee <_malloc_r+0xd2>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	442b      	add	r3, r5
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	e00e      	b.n	80035bc <_malloc_r+0xa0>
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	1b52      	subs	r2, r2, r5
 80035a2:	d41e      	bmi.n	80035e2 <_malloc_r+0xc6>
 80035a4:	2a0b      	cmp	r2, #11
 80035a6:	d916      	bls.n	80035d6 <_malloc_r+0xba>
 80035a8:	1961      	adds	r1, r4, r5
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	6025      	str	r5, [r4, #0]
 80035ae:	bf18      	it	ne
 80035b0:	6059      	strne	r1, [r3, #4]
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	bf08      	it	eq
 80035b6:	6031      	streq	r1, [r6, #0]
 80035b8:	5162      	str	r2, [r4, r5]
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	4638      	mov	r0, r7
 80035be:	f104 060b 	add.w	r6, r4, #11
 80035c2:	f000 f855 	bl	8003670 <__malloc_unlock>
 80035c6:	f026 0607 	bic.w	r6, r6, #7
 80035ca:	1d23      	adds	r3, r4, #4
 80035cc:	1af2      	subs	r2, r6, r3
 80035ce:	d0b6      	beq.n	800353e <_malloc_r+0x22>
 80035d0:	1b9b      	subs	r3, r3, r6
 80035d2:	50a3      	str	r3, [r4, r2]
 80035d4:	e7b3      	b.n	800353e <_malloc_r+0x22>
 80035d6:	6862      	ldr	r2, [r4, #4]
 80035d8:	42a3      	cmp	r3, r4
 80035da:	bf0c      	ite	eq
 80035dc:	6032      	streq	r2, [r6, #0]
 80035de:	605a      	strne	r2, [r3, #4]
 80035e0:	e7ec      	b.n	80035bc <_malloc_r+0xa0>
 80035e2:	4623      	mov	r3, r4
 80035e4:	6864      	ldr	r4, [r4, #4]
 80035e6:	e7b2      	b.n	800354e <_malloc_r+0x32>
 80035e8:	4634      	mov	r4, r6
 80035ea:	6876      	ldr	r6, [r6, #4]
 80035ec:	e7b9      	b.n	8003562 <_malloc_r+0x46>
 80035ee:	230c      	movs	r3, #12
 80035f0:	4638      	mov	r0, r7
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	f000 f83c 	bl	8003670 <__malloc_unlock>
 80035f8:	e7a1      	b.n	800353e <_malloc_r+0x22>
 80035fa:	6025      	str	r5, [r4, #0]
 80035fc:	e7de      	b.n	80035bc <_malloc_r+0xa0>
 80035fe:	bf00      	nop
 8003600:	20000284 	.word	0x20000284

08003604 <_sbrk_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4d05      	ldr	r5, [pc, #20]	; (8003620 <_sbrk_r+0x1c>)
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd fcbe 	bl	8000f90 <_sbrk>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_sbrk_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_sbrk_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	2000028c 	.word	0x2000028c

08003624 <siprintf>:
 8003624:	b40e      	push	{r1, r2, r3}
 8003626:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800362a:	b500      	push	{lr}
 800362c:	b09c      	sub	sp, #112	; 0x70
 800362e:	ab1d      	add	r3, sp, #116	; 0x74
 8003630:	9002      	str	r0, [sp, #8]
 8003632:	9006      	str	r0, [sp, #24]
 8003634:	9107      	str	r1, [sp, #28]
 8003636:	9104      	str	r1, [sp, #16]
 8003638:	4808      	ldr	r0, [pc, #32]	; (800365c <siprintf+0x38>)
 800363a:	4909      	ldr	r1, [pc, #36]	; (8003660 <siprintf+0x3c>)
 800363c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003640:	9105      	str	r1, [sp, #20]
 8003642:	6800      	ldr	r0, [r0, #0]
 8003644:	a902      	add	r1, sp, #8
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	f000 f874 	bl	8003734 <_svfiprintf_r>
 800364c:	2200      	movs	r2, #0
 800364e:	9b02      	ldr	r3, [sp, #8]
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	b01c      	add	sp, #112	; 0x70
 8003654:	f85d eb04 	ldr.w	lr, [sp], #4
 8003658:	b003      	add	sp, #12
 800365a:	4770      	bx	lr
 800365c:	2000003c 	.word	0x2000003c
 8003660:	ffff0208 	.word	0xffff0208

08003664 <__malloc_lock>:
 8003664:	4801      	ldr	r0, [pc, #4]	; (800366c <__malloc_lock+0x8>)
 8003666:	f000 bafb 	b.w	8003c60 <__retarget_lock_acquire_recursive>
 800366a:	bf00      	nop
 800366c:	20000290 	.word	0x20000290

08003670 <__malloc_unlock>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__malloc_unlock+0x8>)
 8003672:	f000 baf6 	b.w	8003c62 <__retarget_lock_release_recursive>
 8003676:	bf00      	nop
 8003678:	20000290 	.word	0x20000290

0800367c <__ssputs_r>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	688e      	ldr	r6, [r1, #8]
 8003682:	4682      	mov	sl, r0
 8003684:	429e      	cmp	r6, r3
 8003686:	460c      	mov	r4, r1
 8003688:	4690      	mov	r8, r2
 800368a:	461f      	mov	r7, r3
 800368c:	d838      	bhi.n	8003700 <__ssputs_r+0x84>
 800368e:	898a      	ldrh	r2, [r1, #12]
 8003690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003694:	d032      	beq.n	80036fc <__ssputs_r+0x80>
 8003696:	6825      	ldr	r5, [r4, #0]
 8003698:	6909      	ldr	r1, [r1, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	eba5 0901 	sub.w	r9, r5, r1
 80036a0:	6965      	ldr	r5, [r4, #20]
 80036a2:	444b      	add	r3, r9
 80036a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036ac:	106d      	asrs	r5, r5, #1
 80036ae:	429d      	cmp	r5, r3
 80036b0:	bf38      	it	cc
 80036b2:	461d      	movcc	r5, r3
 80036b4:	0553      	lsls	r3, r2, #21
 80036b6:	d531      	bpl.n	800371c <__ssputs_r+0xa0>
 80036b8:	4629      	mov	r1, r5
 80036ba:	f7ff ff2f 	bl	800351c <_malloc_r>
 80036be:	4606      	mov	r6, r0
 80036c0:	b950      	cbnz	r0, 80036d8 <__ssputs_r+0x5c>
 80036c2:	230c      	movs	r3, #12
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	f8ca 3000 	str.w	r3, [sl]
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d2:	81a3      	strh	r3, [r4, #12]
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d8:	464a      	mov	r2, r9
 80036da:	6921      	ldr	r1, [r4, #16]
 80036dc:	f000 fad0 	bl	8003c80 <memcpy>
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	6126      	str	r6, [r4, #16]
 80036ee:	444e      	add	r6, r9
 80036f0:	6026      	str	r6, [r4, #0]
 80036f2:	463e      	mov	r6, r7
 80036f4:	6165      	str	r5, [r4, #20]
 80036f6:	eba5 0509 	sub.w	r5, r5, r9
 80036fa:	60a5      	str	r5, [r4, #8]
 80036fc:	42be      	cmp	r6, r7
 80036fe:	d900      	bls.n	8003702 <__ssputs_r+0x86>
 8003700:	463e      	mov	r6, r7
 8003702:	4632      	mov	r2, r6
 8003704:	4641      	mov	r1, r8
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	f000 fac8 	bl	8003c9c <memmove>
 800370c:	68a3      	ldr	r3, [r4, #8]
 800370e:	2000      	movs	r0, #0
 8003710:	1b9b      	subs	r3, r3, r6
 8003712:	60a3      	str	r3, [r4, #8]
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	4433      	add	r3, r6
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	e7db      	b.n	80036d4 <__ssputs_r+0x58>
 800371c:	462a      	mov	r2, r5
 800371e:	f000 fad7 	bl	8003cd0 <_realloc_r>
 8003722:	4606      	mov	r6, r0
 8003724:	2800      	cmp	r0, #0
 8003726:	d1e1      	bne.n	80036ec <__ssputs_r+0x70>
 8003728:	4650      	mov	r0, sl
 800372a:	6921      	ldr	r1, [r4, #16]
 800372c:	f7ff fe8e 	bl	800344c <_free_r>
 8003730:	e7c7      	b.n	80036c2 <__ssputs_r+0x46>
	...

08003734 <_svfiprintf_r>:
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	4698      	mov	r8, r3
 800373a:	898b      	ldrh	r3, [r1, #12]
 800373c:	4607      	mov	r7, r0
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	460d      	mov	r5, r1
 8003742:	4614      	mov	r4, r2
 8003744:	b09d      	sub	sp, #116	; 0x74
 8003746:	d50e      	bpl.n	8003766 <_svfiprintf_r+0x32>
 8003748:	690b      	ldr	r3, [r1, #16]
 800374a:	b963      	cbnz	r3, 8003766 <_svfiprintf_r+0x32>
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	f7ff fee5 	bl	800351c <_malloc_r>
 8003752:	6028      	str	r0, [r5, #0]
 8003754:	6128      	str	r0, [r5, #16]
 8003756:	b920      	cbnz	r0, 8003762 <_svfiprintf_r+0x2e>
 8003758:	230c      	movs	r3, #12
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	e0d1      	b.n	8003906 <_svfiprintf_r+0x1d2>
 8003762:	2340      	movs	r3, #64	; 0x40
 8003764:	616b      	str	r3, [r5, #20]
 8003766:	2300      	movs	r3, #0
 8003768:	9309      	str	r3, [sp, #36]	; 0x24
 800376a:	2320      	movs	r3, #32
 800376c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003770:	2330      	movs	r3, #48	; 0x30
 8003772:	f04f 0901 	mov.w	r9, #1
 8003776:	f8cd 800c 	str.w	r8, [sp, #12]
 800377a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003920 <_svfiprintf_r+0x1ec>
 800377e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003782:	4623      	mov	r3, r4
 8003784:	469a      	mov	sl, r3
 8003786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378a:	b10a      	cbz	r2, 8003790 <_svfiprintf_r+0x5c>
 800378c:	2a25      	cmp	r2, #37	; 0x25
 800378e:	d1f9      	bne.n	8003784 <_svfiprintf_r+0x50>
 8003790:	ebba 0b04 	subs.w	fp, sl, r4
 8003794:	d00b      	beq.n	80037ae <_svfiprintf_r+0x7a>
 8003796:	465b      	mov	r3, fp
 8003798:	4622      	mov	r2, r4
 800379a:	4629      	mov	r1, r5
 800379c:	4638      	mov	r0, r7
 800379e:	f7ff ff6d 	bl	800367c <__ssputs_r>
 80037a2:	3001      	adds	r0, #1
 80037a4:	f000 80aa 	beq.w	80038fc <_svfiprintf_r+0x1c8>
 80037a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037aa:	445a      	add	r2, fp
 80037ac:	9209      	str	r2, [sp, #36]	; 0x24
 80037ae:	f89a 3000 	ldrb.w	r3, [sl]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80a2 	beq.w	80038fc <_svfiprintf_r+0x1c8>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f04f 32ff 	mov.w	r2, #4294967295
 80037be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c2:	f10a 0a01 	add.w	sl, sl, #1
 80037c6:	9304      	str	r3, [sp, #16]
 80037c8:	9307      	str	r3, [sp, #28]
 80037ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ce:	931a      	str	r3, [sp, #104]	; 0x68
 80037d0:	4654      	mov	r4, sl
 80037d2:	2205      	movs	r2, #5
 80037d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d8:	4851      	ldr	r0, [pc, #324]	; (8003920 <_svfiprintf_r+0x1ec>)
 80037da:	f000 fa43 	bl	8003c64 <memchr>
 80037de:	9a04      	ldr	r2, [sp, #16]
 80037e0:	b9d8      	cbnz	r0, 800381a <_svfiprintf_r+0xe6>
 80037e2:	06d0      	lsls	r0, r2, #27
 80037e4:	bf44      	itt	mi
 80037e6:	2320      	movmi	r3, #32
 80037e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ec:	0711      	lsls	r1, r2, #28
 80037ee:	bf44      	itt	mi
 80037f0:	232b      	movmi	r3, #43	; 0x2b
 80037f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f6:	f89a 3000 	ldrb.w	r3, [sl]
 80037fa:	2b2a      	cmp	r3, #42	; 0x2a
 80037fc:	d015      	beq.n	800382a <_svfiprintf_r+0xf6>
 80037fe:	4654      	mov	r4, sl
 8003800:	2000      	movs	r0, #0
 8003802:	f04f 0c0a 	mov.w	ip, #10
 8003806:	9a07      	ldr	r2, [sp, #28]
 8003808:	4621      	mov	r1, r4
 800380a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800380e:	3b30      	subs	r3, #48	; 0x30
 8003810:	2b09      	cmp	r3, #9
 8003812:	d94e      	bls.n	80038b2 <_svfiprintf_r+0x17e>
 8003814:	b1b0      	cbz	r0, 8003844 <_svfiprintf_r+0x110>
 8003816:	9207      	str	r2, [sp, #28]
 8003818:	e014      	b.n	8003844 <_svfiprintf_r+0x110>
 800381a:	eba0 0308 	sub.w	r3, r0, r8
 800381e:	fa09 f303 	lsl.w	r3, r9, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	46a2      	mov	sl, r4
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	e7d2      	b.n	80037d0 <_svfiprintf_r+0x9c>
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	1d19      	adds	r1, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	9103      	str	r1, [sp, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfbb      	ittet	lt
 8003836:	425b      	neglt	r3, r3
 8003838:	f042 0202 	orrlt.w	r2, r2, #2
 800383c:	9307      	strge	r3, [sp, #28]
 800383e:	9307      	strlt	r3, [sp, #28]
 8003840:	bfb8      	it	lt
 8003842:	9204      	strlt	r2, [sp, #16]
 8003844:	7823      	ldrb	r3, [r4, #0]
 8003846:	2b2e      	cmp	r3, #46	; 0x2e
 8003848:	d10c      	bne.n	8003864 <_svfiprintf_r+0x130>
 800384a:	7863      	ldrb	r3, [r4, #1]
 800384c:	2b2a      	cmp	r3, #42	; 0x2a
 800384e:	d135      	bne.n	80038bc <_svfiprintf_r+0x188>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	3402      	adds	r4, #2
 8003854:	1d1a      	adds	r2, r3, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	9203      	str	r2, [sp, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfb8      	it	lt
 800385e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003924 <_svfiprintf_r+0x1f0>
 8003868:	2203      	movs	r2, #3
 800386a:	4650      	mov	r0, sl
 800386c:	7821      	ldrb	r1, [r4, #0]
 800386e:	f000 f9f9 	bl	8003c64 <memchr>
 8003872:	b140      	cbz	r0, 8003886 <_svfiprintf_r+0x152>
 8003874:	2340      	movs	r3, #64	; 0x40
 8003876:	eba0 000a 	sub.w	r0, r0, sl
 800387a:	fa03 f000 	lsl.w	r0, r3, r0
 800387e:	9b04      	ldr	r3, [sp, #16]
 8003880:	3401      	adds	r4, #1
 8003882:	4303      	orrs	r3, r0
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388a:	2206      	movs	r2, #6
 800388c:	4826      	ldr	r0, [pc, #152]	; (8003928 <_svfiprintf_r+0x1f4>)
 800388e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003892:	f000 f9e7 	bl	8003c64 <memchr>
 8003896:	2800      	cmp	r0, #0
 8003898:	d038      	beq.n	800390c <_svfiprintf_r+0x1d8>
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <_svfiprintf_r+0x1f8>)
 800389c:	bb1b      	cbnz	r3, 80038e6 <_svfiprintf_r+0x1b2>
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	3307      	adds	r3, #7
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	3308      	adds	r3, #8
 80038a8:	9303      	str	r3, [sp, #12]
 80038aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ac:	4433      	add	r3, r6
 80038ae:	9309      	str	r3, [sp, #36]	; 0x24
 80038b0:	e767      	b.n	8003782 <_svfiprintf_r+0x4e>
 80038b2:	460c      	mov	r4, r1
 80038b4:	2001      	movs	r0, #1
 80038b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80038ba:	e7a5      	b.n	8003808 <_svfiprintf_r+0xd4>
 80038bc:	2300      	movs	r3, #0
 80038be:	f04f 0c0a 	mov.w	ip, #10
 80038c2:	4619      	mov	r1, r3
 80038c4:	3401      	adds	r4, #1
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	4620      	mov	r0, r4
 80038ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038ce:	3a30      	subs	r2, #48	; 0x30
 80038d0:	2a09      	cmp	r2, #9
 80038d2:	d903      	bls.n	80038dc <_svfiprintf_r+0x1a8>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0c5      	beq.n	8003864 <_svfiprintf_r+0x130>
 80038d8:	9105      	str	r1, [sp, #20]
 80038da:	e7c3      	b.n	8003864 <_svfiprintf_r+0x130>
 80038dc:	4604      	mov	r4, r0
 80038de:	2301      	movs	r3, #1
 80038e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e4:	e7f0      	b.n	80038c8 <_svfiprintf_r+0x194>
 80038e6:	ab03      	add	r3, sp, #12
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	462a      	mov	r2, r5
 80038ec:	4638      	mov	r0, r7
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <_svfiprintf_r+0x1fc>)
 80038f0:	a904      	add	r1, sp, #16
 80038f2:	f3af 8000 	nop.w
 80038f6:	1c42      	adds	r2, r0, #1
 80038f8:	4606      	mov	r6, r0
 80038fa:	d1d6      	bne.n	80038aa <_svfiprintf_r+0x176>
 80038fc:	89ab      	ldrh	r3, [r5, #12]
 80038fe:	065b      	lsls	r3, r3, #25
 8003900:	f53f af2c 	bmi.w	800375c <_svfiprintf_r+0x28>
 8003904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003906:	b01d      	add	sp, #116	; 0x74
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	ab03      	add	r3, sp, #12
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	462a      	mov	r2, r5
 8003912:	4638      	mov	r0, r7
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <_svfiprintf_r+0x1fc>)
 8003916:	a904      	add	r1, sp, #16
 8003918:	f000 f87c 	bl	8003a14 <_printf_i>
 800391c:	e7eb      	b.n	80038f6 <_svfiprintf_r+0x1c2>
 800391e:	bf00      	nop
 8003920:	08003d98 	.word	0x08003d98
 8003924:	08003d9e 	.word	0x08003d9e
 8003928:	08003da2 	.word	0x08003da2
 800392c:	00000000 	.word	0x00000000
 8003930:	0800367d 	.word	0x0800367d

08003934 <_printf_common>:
 8003934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	4616      	mov	r6, r2
 800393a:	4699      	mov	r9, r3
 800393c:	688a      	ldr	r2, [r1, #8]
 800393e:	690b      	ldr	r3, [r1, #16]
 8003940:	4607      	mov	r7, r0
 8003942:	4293      	cmp	r3, r2
 8003944:	bfb8      	it	lt
 8003946:	4613      	movlt	r3, r2
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800394e:	460c      	mov	r4, r1
 8003950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003954:	b10a      	cbz	r2, 800395a <_printf_common+0x26>
 8003956:	3301      	adds	r3, #1
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	0699      	lsls	r1, r3, #26
 800395e:	bf42      	ittt	mi
 8003960:	6833      	ldrmi	r3, [r6, #0]
 8003962:	3302      	addmi	r3, #2
 8003964:	6033      	strmi	r3, [r6, #0]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d106      	bne.n	800397c <_printf_common+0x48>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	6832      	ldr	r2, [r6, #0]
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	42ab      	cmp	r3, r5
 800397a:	dc28      	bgt.n	80039ce <_printf_common+0x9a>
 800397c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003980:	1e13      	subs	r3, r2, #0
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	bf18      	it	ne
 8003986:	2301      	movne	r3, #1
 8003988:	0692      	lsls	r2, r2, #26
 800398a:	d42d      	bmi.n	80039e8 <_printf_common+0xb4>
 800398c:	4649      	mov	r1, r9
 800398e:	4638      	mov	r0, r7
 8003990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d020      	beq.n	80039dc <_printf_common+0xa8>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	68e5      	ldr	r5, [r4, #12]
 800399e:	f003 0306 	and.w	r3, r3, #6
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	bf18      	it	ne
 80039a6:	2500      	movne	r5, #0
 80039a8:	6832      	ldr	r2, [r6, #0]
 80039aa:	f04f 0600 	mov.w	r6, #0
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	bf08      	it	eq
 80039b2:	1aad      	subeq	r5, r5, r2
 80039b4:	6922      	ldr	r2, [r4, #16]
 80039b6:	bf08      	it	eq
 80039b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039bc:	4293      	cmp	r3, r2
 80039be:	bfc4      	itt	gt
 80039c0:	1a9b      	subgt	r3, r3, r2
 80039c2:	18ed      	addgt	r5, r5, r3
 80039c4:	341a      	adds	r4, #26
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	d11a      	bne.n	8003a00 <_printf_common+0xcc>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e008      	b.n	80039e0 <_printf_common+0xac>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4649      	mov	r1, r9
 80039d4:	4638      	mov	r0, r7
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d103      	bne.n	80039e4 <_printf_common+0xb0>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7c4      	b.n	8003972 <_printf_common+0x3e>
 80039e8:	2030      	movs	r0, #48	; 0x30
 80039ea:	18e1      	adds	r1, r4, r3
 80039ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f6:	4422      	add	r2, r4
 80039f8:	3302      	adds	r3, #2
 80039fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fe:	e7c5      	b.n	800398c <_printf_common+0x58>
 8003a00:	2301      	movs	r3, #1
 8003a02:	4622      	mov	r2, r4
 8003a04:	4649      	mov	r1, r9
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0e6      	beq.n	80039dc <_printf_common+0xa8>
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7d9      	b.n	80039c6 <_printf_common+0x92>
	...

08003a14 <_printf_i>:
 8003a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	7e0f      	ldrb	r7, [r1, #24]
 8003a1a:	4691      	mov	r9, r2
 8003a1c:	2f78      	cmp	r7, #120	; 0x78
 8003a1e:	4680      	mov	r8, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	469a      	mov	sl, r3
 8003a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a2a:	d807      	bhi.n	8003a3c <_printf_i+0x28>
 8003a2c:	2f62      	cmp	r7, #98	; 0x62
 8003a2e:	d80a      	bhi.n	8003a46 <_printf_i+0x32>
 8003a30:	2f00      	cmp	r7, #0
 8003a32:	f000 80d9 	beq.w	8003be8 <_printf_i+0x1d4>
 8003a36:	2f58      	cmp	r7, #88	; 0x58
 8003a38:	f000 80a4 	beq.w	8003b84 <_printf_i+0x170>
 8003a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a44:	e03a      	b.n	8003abc <_printf_i+0xa8>
 8003a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a4a:	2b15      	cmp	r3, #21
 8003a4c:	d8f6      	bhi.n	8003a3c <_printf_i+0x28>
 8003a4e:	a101      	add	r1, pc, #4	; (adr r1, 8003a54 <_printf_i+0x40>)
 8003a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003a3d 	.word	0x08003a3d
 8003a60:	08003a3d 	.word	0x08003a3d
 8003a64:	08003a3d 	.word	0x08003a3d
 8003a68:	08003a3d 	.word	0x08003a3d
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003a3d 	.word	0x08003a3d
 8003a74:	08003a3d 	.word	0x08003a3d
 8003a78:	08003a3d 	.word	0x08003a3d
 8003a7c:	08003a3d 	.word	0x08003a3d
 8003a80:	08003bcf 	.word	0x08003bcf
 8003a84:	08003af1 	.word	0x08003af1
 8003a88:	08003bb1 	.word	0x08003bb1
 8003a8c:	08003a3d 	.word	0x08003a3d
 8003a90:	08003a3d 	.word	0x08003a3d
 8003a94:	08003bf1 	.word	0x08003bf1
 8003a98:	08003a3d 	.word	0x08003a3d
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003a3d 	.word	0x08003a3d
 8003aa4:	08003a3d 	.word	0x08003a3d
 8003aa8:	08003bb9 	.word	0x08003bb9
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	602a      	str	r2, [r5, #0]
 8003ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0a4      	b.n	8003c0a <_printf_i+0x1f6>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	6829      	ldr	r1, [r5, #0]
 8003ac4:	0606      	lsls	r6, r0, #24
 8003ac6:	f101 0304 	add.w	r3, r1, #4
 8003aca:	d50a      	bpl.n	8003ae2 <_printf_i+0xce>
 8003acc:	680e      	ldr	r6, [r1, #0]
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	2e00      	cmp	r6, #0
 8003ad2:	da03      	bge.n	8003adc <_printf_i+0xc8>
 8003ad4:	232d      	movs	r3, #45	; 0x2d
 8003ad6:	4276      	negs	r6, r6
 8003ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003adc:	230a      	movs	r3, #10
 8003ade:	485e      	ldr	r0, [pc, #376]	; (8003c58 <_printf_i+0x244>)
 8003ae0:	e019      	b.n	8003b16 <_printf_i+0x102>
 8003ae2:	680e      	ldr	r6, [r1, #0]
 8003ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	bf18      	it	ne
 8003aec:	b236      	sxthne	r6, r6
 8003aee:	e7ef      	b.n	8003ad0 <_printf_i+0xbc>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1d19      	adds	r1, r3, #4
 8003af6:	6029      	str	r1, [r5, #0]
 8003af8:	0601      	lsls	r1, r0, #24
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0xec>
 8003afc:	681e      	ldr	r6, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0xf2>
 8003b00:	0646      	lsls	r6, r0, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0xe8>
 8003b04:	881e      	ldrh	r6, [r3, #0]
 8003b06:	2f6f      	cmp	r7, #111	; 0x6f
 8003b08:	bf0c      	ite	eq
 8003b0a:	2308      	moveq	r3, #8
 8003b0c:	230a      	movne	r3, #10
 8003b0e:	4852      	ldr	r0, [pc, #328]	; (8003c58 <_printf_i+0x244>)
 8003b10:	2100      	movs	r1, #0
 8003b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b16:	6865      	ldr	r5, [r4, #4]
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	bfa8      	it	ge
 8003b1c:	6821      	ldrge	r1, [r4, #0]
 8003b1e:	60a5      	str	r5, [r4, #8]
 8003b20:	bfa4      	itt	ge
 8003b22:	f021 0104 	bicge.w	r1, r1, #4
 8003b26:	6021      	strge	r1, [r4, #0]
 8003b28:	b90e      	cbnz	r6, 8003b2e <_printf_i+0x11a>
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	d04d      	beq.n	8003bca <_printf_i+0x1b6>
 8003b2e:	4615      	mov	r5, r2
 8003b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b34:	fb03 6711 	mls	r7, r3, r1, r6
 8003b38:	5dc7      	ldrb	r7, [r0, r7]
 8003b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b3e:	4637      	mov	r7, r6
 8003b40:	42bb      	cmp	r3, r7
 8003b42:	460e      	mov	r6, r1
 8003b44:	d9f4      	bls.n	8003b30 <_printf_i+0x11c>
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d10b      	bne.n	8003b62 <_printf_i+0x14e>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	07de      	lsls	r6, r3, #31
 8003b4e:	d508      	bpl.n	8003b62 <_printf_i+0x14e>
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	6861      	ldr	r1, [r4, #4]
 8003b54:	4299      	cmp	r1, r3
 8003b56:	bfde      	ittt	le
 8003b58:	2330      	movle	r3, #48	; 0x30
 8003b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b62:	1b52      	subs	r2, r2, r5
 8003b64:	6122      	str	r2, [r4, #16]
 8003b66:	464b      	mov	r3, r9
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f8cd a000 	str.w	sl, [sp]
 8003b70:	aa03      	add	r2, sp, #12
 8003b72:	f7ff fedf 	bl	8003934 <_printf_common>
 8003b76:	3001      	adds	r0, #1
 8003b78:	d14c      	bne.n	8003c14 <_printf_i+0x200>
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	b004      	add	sp, #16
 8003b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b84:	4834      	ldr	r0, [pc, #208]	; (8003c58 <_printf_i+0x244>)
 8003b86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b8a:	6829      	ldr	r1, [r5, #0]
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b92:	6029      	str	r1, [r5, #0]
 8003b94:	061d      	lsls	r5, r3, #24
 8003b96:	d514      	bpl.n	8003bc2 <_printf_i+0x1ae>
 8003b98:	07df      	lsls	r7, r3, #31
 8003b9a:	bf44      	itt	mi
 8003b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003ba0:	6023      	strmi	r3, [r4, #0]
 8003ba2:	b91e      	cbnz	r6, 8003bac <_printf_i+0x198>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	2310      	movs	r3, #16
 8003bae:	e7af      	b.n	8003b10 <_printf_i+0xfc>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f043 0320 	orr.w	r3, r3, #32
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	2378      	movs	r3, #120	; 0x78
 8003bba:	4828      	ldr	r0, [pc, #160]	; (8003c5c <_printf_i+0x248>)
 8003bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bc0:	e7e3      	b.n	8003b8a <_printf_i+0x176>
 8003bc2:	0659      	lsls	r1, r3, #25
 8003bc4:	bf48      	it	mi
 8003bc6:	b2b6      	uxthmi	r6, r6
 8003bc8:	e7e6      	b.n	8003b98 <_printf_i+0x184>
 8003bca:	4615      	mov	r5, r2
 8003bcc:	e7bb      	b.n	8003b46 <_printf_i+0x132>
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	6826      	ldr	r6, [r4, #0]
 8003bd2:	1d18      	adds	r0, r3, #4
 8003bd4:	6961      	ldr	r1, [r4, #20]
 8003bd6:	6028      	str	r0, [r5, #0]
 8003bd8:	0635      	lsls	r5, r6, #24
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	d501      	bpl.n	8003be2 <_printf_i+0x1ce>
 8003bde:	6019      	str	r1, [r3, #0]
 8003be0:	e002      	b.n	8003be8 <_printf_i+0x1d4>
 8003be2:	0670      	lsls	r0, r6, #25
 8003be4:	d5fb      	bpl.n	8003bde <_printf_i+0x1ca>
 8003be6:	8019      	strh	r1, [r3, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	4615      	mov	r5, r2
 8003bec:	6123      	str	r3, [r4, #16]
 8003bee:	e7ba      	b.n	8003b66 <_printf_i+0x152>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	602a      	str	r2, [r5, #0]
 8003bf8:	681d      	ldr	r5, [r3, #0]
 8003bfa:	6862      	ldr	r2, [r4, #4]
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 f831 	bl	8003c64 <memchr>
 8003c02:	b108      	cbz	r0, 8003c08 <_printf_i+0x1f4>
 8003c04:	1b40      	subs	r0, r0, r5
 8003c06:	6060      	str	r0, [r4, #4]
 8003c08:	6863      	ldr	r3, [r4, #4]
 8003c0a:	6123      	str	r3, [r4, #16]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c12:	e7a8      	b.n	8003b66 <_printf_i+0x152>
 8003c14:	462a      	mov	r2, r5
 8003c16:	4649      	mov	r1, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	6923      	ldr	r3, [r4, #16]
 8003c1c:	47d0      	blx	sl
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d0ab      	beq.n	8003b7a <_printf_i+0x166>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	079b      	lsls	r3, r3, #30
 8003c26:	d413      	bmi.n	8003c50 <_printf_i+0x23c>
 8003c28:	68e0      	ldr	r0, [r4, #12]
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	4298      	cmp	r0, r3
 8003c2e:	bfb8      	it	lt
 8003c30:	4618      	movlt	r0, r3
 8003c32:	e7a4      	b.n	8003b7e <_printf_i+0x16a>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4632      	mov	r2, r6
 8003c38:	4649      	mov	r1, r9
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	47d0      	blx	sl
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d09b      	beq.n	8003b7a <_printf_i+0x166>
 8003c42:	3501      	adds	r5, #1
 8003c44:	68e3      	ldr	r3, [r4, #12]
 8003c46:	9903      	ldr	r1, [sp, #12]
 8003c48:	1a5b      	subs	r3, r3, r1
 8003c4a:	42ab      	cmp	r3, r5
 8003c4c:	dcf2      	bgt.n	8003c34 <_printf_i+0x220>
 8003c4e:	e7eb      	b.n	8003c28 <_printf_i+0x214>
 8003c50:	2500      	movs	r5, #0
 8003c52:	f104 0619 	add.w	r6, r4, #25
 8003c56:	e7f5      	b.n	8003c44 <_printf_i+0x230>
 8003c58:	08003da9 	.word	0x08003da9
 8003c5c:	08003dba 	.word	0x08003dba

08003c60 <__retarget_lock_acquire_recursive>:
 8003c60:	4770      	bx	lr

08003c62 <__retarget_lock_release_recursive>:
 8003c62:	4770      	bx	lr

08003c64 <memchr>:
 8003c64:	4603      	mov	r3, r0
 8003c66:	b510      	push	{r4, lr}
 8003c68:	b2c9      	uxtb	r1, r1
 8003c6a:	4402      	add	r2, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	d101      	bne.n	8003c76 <memchr+0x12>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e003      	b.n	8003c7e <memchr+0x1a>
 8003c76:	7804      	ldrb	r4, [r0, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	428c      	cmp	r4, r1
 8003c7c:	d1f6      	bne.n	8003c6c <memchr+0x8>
 8003c7e:	bd10      	pop	{r4, pc}

08003c80 <memcpy>:
 8003c80:	440a      	add	r2, r1
 8003c82:	4291      	cmp	r1, r2
 8003c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c88:	d100      	bne.n	8003c8c <memcpy+0xc>
 8003c8a:	4770      	bx	lr
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c92:	4291      	cmp	r1, r2
 8003c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c98:	d1f9      	bne.n	8003c8e <memcpy+0xe>
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <memmove>:
 8003c9c:	4288      	cmp	r0, r1
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	eb01 0402 	add.w	r4, r1, r2
 8003ca4:	d902      	bls.n	8003cac <memmove+0x10>
 8003ca6:	4284      	cmp	r4, r0
 8003ca8:	4623      	mov	r3, r4
 8003caa:	d807      	bhi.n	8003cbc <memmove+0x20>
 8003cac:	1e43      	subs	r3, r0, #1
 8003cae:	42a1      	cmp	r1, r4
 8003cb0:	d008      	beq.n	8003cc4 <memmove+0x28>
 8003cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cba:	e7f8      	b.n	8003cae <memmove+0x12>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	4402      	add	r2, r0
 8003cc0:	428a      	cmp	r2, r1
 8003cc2:	d100      	bne.n	8003cc6 <memmove+0x2a>
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cce:	e7f7      	b.n	8003cc0 <memmove+0x24>

08003cd0 <_realloc_r>:
 8003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4614      	mov	r4, r2
 8003cd8:	460e      	mov	r6, r1
 8003cda:	b921      	cbnz	r1, 8003ce6 <_realloc_r+0x16>
 8003cdc:	4611      	mov	r1, r2
 8003cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	f7ff bc1b 	b.w	800351c <_malloc_r>
 8003ce6:	b92a      	cbnz	r2, 8003cf4 <_realloc_r+0x24>
 8003ce8:	f7ff fbb0 	bl	800344c <_free_r>
 8003cec:	4625      	mov	r5, r4
 8003cee:	4628      	mov	r0, r5
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf4:	f000 f81b 	bl	8003d2e <_malloc_usable_size_r>
 8003cf8:	4284      	cmp	r4, r0
 8003cfa:	4607      	mov	r7, r0
 8003cfc:	d802      	bhi.n	8003d04 <_realloc_r+0x34>
 8003cfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d02:	d812      	bhi.n	8003d2a <_realloc_r+0x5a>
 8003d04:	4621      	mov	r1, r4
 8003d06:	4640      	mov	r0, r8
 8003d08:	f7ff fc08 	bl	800351c <_malloc_r>
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d0ed      	beq.n	8003cee <_realloc_r+0x1e>
 8003d12:	42bc      	cmp	r4, r7
 8003d14:	4622      	mov	r2, r4
 8003d16:	4631      	mov	r1, r6
 8003d18:	bf28      	it	cs
 8003d1a:	463a      	movcs	r2, r7
 8003d1c:	f7ff ffb0 	bl	8003c80 <memcpy>
 8003d20:	4631      	mov	r1, r6
 8003d22:	4640      	mov	r0, r8
 8003d24:	f7ff fb92 	bl	800344c <_free_r>
 8003d28:	e7e1      	b.n	8003cee <_realloc_r+0x1e>
 8003d2a:	4635      	mov	r5, r6
 8003d2c:	e7df      	b.n	8003cee <_realloc_r+0x1e>

08003d2e <_malloc_usable_size_r>:
 8003d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d32:	1f18      	subs	r0, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfbc      	itt	lt
 8003d38:	580b      	ldrlt	r3, [r1, r0]
 8003d3a:	18c0      	addlt	r0, r0, r3
 8003d3c:	4770      	bx	lr
	...

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
